{"ast":null,"code":"export class AudioContextManager {\n  constructor() {\n    this.audioContext = null;\n    this.mediaStream = null;\n    this.analyser = null;\n    this.dataArray = null;\n    this.isInitialized = false;\n    this.initializationPromise = null;\n    // 延迟创建 AudioContext，等待用户交互\n    this.audioContext = null;\n  }\n  async initialize() {\n    if (this.initializationPromise) {\n      return this.initializationPromise;\n    }\n    this.initializationPromise = new Promise(async (resolve, reject) => {\n      try {\n        // 创建 AudioContext\n        if (!this.audioContext) {\n          this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n          await this.audioContext.resume();\n        }\n\n        // 请求麦克风权限并获取音频流\n        this.mediaStream = await navigator.mediaDevices.getUserMedia({\n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true\n          },\n          video: false\n        });\n\n        // 创建音频源和分析器\n        const source = this.audioContext.createMediaStreamSource(this.mediaStream);\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 2048;\n\n        // 连接音频节点\n        source.connect(this.analyser);\n\n        // 创建数据数组\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        this.isInitialized = true;\n        resolve();\n      } catch (error) {\n        this.cleanup();\n        reject(error);\n      }\n    });\n    return this.initializationPromise;\n  }\n  cleanup() {\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    if (this.analyser) {\n      this.analyser.disconnect();\n      this.analyser = null;\n    }\n    if (this.audioContext) {\n      this.audioContext.close().catch(console.error);\n      this.audioContext = null;\n    }\n    this.dataArray = null;\n    this.isInitialized = false;\n    this.initializationPromise = null;\n  }\n  async startMonitoring() {\n    try {\n      await this.initialize();\n    } catch (error) {\n      this.cleanup();\n      throw new Error('Failed to initialize audio context: ' + error.message);\n    }\n  }\n  stopMonitoring() {\n    this.cleanup();\n  }\n  getVolume() {\n    if (!this.analyser || !this.dataArray || !this.isInitialized) {\n      return 0;\n    }\n    try {\n      // 获取音频数据\n      this.analyser.getByteFrequencyData(this.dataArray);\n\n      // 计算平均音量\n      const average = this.dataArray.reduce((acc, value) => acc + value, 0) / this.dataArray.length;\n\n      // 将音量值映射到 0-100 范围\n      return Math.min(Math.round(average / 255 * 100), 100);\n    } catch (error) {\n      console.error('Error getting volume:', error);\n      return 0;\n    }\n  }\n  isActive() {\n    return this.isInitialized && this.audioContext !== null;\n  }\n}\nexport const audioContextManager = new AudioContextManager();","map":{"version":3,"names":["AudioContextManager","constructor","audioContext","mediaStream","analyser","dataArray","isInitialized","initializationPromise","initialize","Promise","resolve","reject","window","AudioContext","webkitAudioContext","resume","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","video","source","createMediaStreamSource","createAnalyser","fftSize","connect","Uint8Array","frequencyBinCount","error","cleanup","getTracks","forEach","track","stop","disconnect","close","catch","console","startMonitoring","Error","message","stopMonitoring","getVolume","getByteFrequencyData","average","reduce","acc","value","length","Math","min","round","isActive","audioContextManager"],"sources":["D:/projects/volume-monitor/src/utils/audioContext.ts"],"sourcesContent":["export class AudioContextManager {\r\n  private audioContext: AudioContext | null = null;\r\n  private mediaStream: MediaStream | null = null;\r\n  private analyser: AnalyserNode | null = null;\r\n  private dataArray: Uint8Array | null = null;\r\n  private isInitialized: boolean = false;\r\n  private initializationPromise: Promise<void> | null = null;\r\n\r\n  constructor() {\r\n    // 延迟创建 AudioContext，等待用户交互\r\n    this.audioContext = null;\r\n  }\r\n\r\n  private async initialize() {\r\n    if (this.initializationPromise) {\r\n      return this.initializationPromise;\r\n    }\r\n\r\n    this.initializationPromise = new Promise<void>(async (resolve, reject) => {\r\n      try {\r\n        // 创建 AudioContext\r\n        if (!this.audioContext) {\r\n          this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n          await this.audioContext.resume();\r\n        }\r\n\r\n        // 请求麦克风权限并获取音频流\r\n        this.mediaStream = await navigator.mediaDevices.getUserMedia({\r\n          audio: {\r\n            echoCancellation: true,\r\n            noiseSuppression: true,\r\n            autoGainControl: true\r\n          },\r\n          video: false\r\n        });\r\n\r\n        // 创建音频源和分析器\r\n        const source = this.audioContext.createMediaStreamSource(this.mediaStream);\r\n        this.analyser = this.audioContext.createAnalyser();\r\n        this.analyser.fftSize = 2048;\r\n        \r\n        // 连接音频节点\r\n        source.connect(this.analyser);\r\n        \r\n        // 创建数据数组\r\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n        \r\n        this.isInitialized = true;\r\n        resolve();\r\n      } catch (error) {\r\n        this.cleanup();\r\n        reject(error);\r\n      }\r\n    });\r\n\r\n    return this.initializationPromise;\r\n  }\r\n\r\n  private cleanup() {\r\n    if (this.mediaStream) {\r\n      this.mediaStream.getTracks().forEach(track => track.stop());\r\n      this.mediaStream = null;\r\n    }\r\n    if (this.analyser) {\r\n      this.analyser.disconnect();\r\n      this.analyser = null;\r\n    }\r\n    if (this.audioContext) {\r\n      this.audioContext.close().catch(console.error);\r\n      this.audioContext = null;\r\n    }\r\n    this.dataArray = null;\r\n    this.isInitialized = false;\r\n    this.initializationPromise = null;\r\n  }\r\n\r\n  async startMonitoring() {\r\n    try {\r\n      await this.initialize();\r\n    } catch (error) {\r\n      this.cleanup();\r\n      throw new Error('Failed to initialize audio context: ' + (error as Error).message);\r\n    }\r\n  }\r\n\r\n  stopMonitoring() {\r\n    this.cleanup();\r\n  }\r\n\r\n  getVolume(): number {\r\n    if (!this.analyser || !this.dataArray || !this.isInitialized) {\r\n      return 0;\r\n    }\r\n\r\n    try {\r\n      // 获取音频数据\r\n      this.analyser.getByteFrequencyData(this.dataArray);\r\n\r\n      // 计算平均音量\r\n      const average = this.dataArray.reduce((acc, value) => acc + value, 0) / this.dataArray.length;\r\n      \r\n      // 将音量值映射到 0-100 范围\r\n      return Math.min(Math.round((average / 255) * 100), 100);\r\n    } catch (error) {\r\n      console.error('Error getting volume:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return this.isInitialized && this.audioContext !== null;\r\n  }\r\n}\r\n\r\nexport const audioContextManager = new AudioContextManager(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}