{"ast":null,"code":"// 定义音量计算的配置接口\n\n// 计算RMS音量\nfunction calculateRMSVolume(dataArray) {\n  let sum = 0;\n  for (let i = 0; i < dataArray.length; i++) {\n    sum += dataArray[i] * dataArray[i];\n  }\n  return Math.sqrt(sum / dataArray.length);\n}\n\n// 将RMS值转换为百分比\nfunction convertToPercentage(rms) {\n  return Math.min(100, Math.max(0, rms * 100));\n}\n\n// 监听主线程消息\nself.onmessage = e => {\n  const {\n    dataArray\n  } = e.data;\n  try {\n    // 计算音量\n    const rms = calculateRMSVolume(dataArray);\n    const volume = convertToPercentage(rms);\n\n    // 发送结果回主线程\n    self.postMessage({\n      type: 'volume',\n      data: {\n        volume,\n        raw: {\n          rms\n        }\n      }\n    });\n  } catch (error) {\n    // 发送错误回主线程\n    self.postMessage({\n      type: 'error',\n      error: error.message\n    });\n  }\n};\n\n// 处理错误\nself.onerror = error => {\n  self.postMessage({\n    type: 'error',\n    error: error.message\n  });\n};","map":{"version":3,"names":["calculateRMSVolume","dataArray","sum","i","length","Math","sqrt","convertToPercentage","rms","min","max","self","onmessage","e","data","volume","postMessage","type","raw","error","message","onerror"],"sources":["D:/projects/volume-monitor/src/workers/volumeWorker.ts"],"sourcesContent":["// 定义音量计算的配置接口\r\ninterface VolumeAnalysisConfig {\r\n  dataArray: Float32Array;\r\n  minDecibels: number;\r\n  maxDecibels: number;\r\n}\r\n\r\n// 计算RMS音量\r\nfunction calculateRMSVolume(dataArray: Float32Array): number {\r\n  let sum = 0;\r\n  for (let i = 0; i < dataArray.length; i++) {\r\n    sum += dataArray[i] * dataArray[i];\r\n  }\r\n  return Math.sqrt(sum / dataArray.length);\r\n}\r\n\r\n// 将RMS值转换为百分比\r\nfunction convertToPercentage(rms: number): number {\r\n  return Math.min(100, Math.max(0, rms * 100));\r\n}\r\n\r\n// 监听主线程消息\r\nself.onmessage = (e: MessageEvent) => {\r\n  const { dataArray } = e.data;\r\n  \r\n  try {\r\n    // 计算音量\r\n    const rms = calculateRMSVolume(dataArray);\r\n    const volume = convertToPercentage(rms);\r\n\r\n    // 发送结果回主线程\r\n    self.postMessage({\r\n      type: 'volume',\r\n      data: {\r\n        volume,\r\n        raw: {\r\n          rms\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    // 发送错误回主线程\r\n    self.postMessage({\r\n      type: 'error',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// 处理错误\r\nself.onerror = (error) => {\r\n  self.postMessage({\r\n    type: 'error',\r\n    error: error.message\r\n  });\r\n}; "],"mappings":"AAAA;;AAOA;AACA,SAASA,kBAAkBA,CAACC,SAAuB,EAAU;EAC3D,IAAIC,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACzCD,GAAG,IAAID,SAAS,CAACE,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,CAAC;EACpC;EACA,OAAOE,IAAI,CAACC,IAAI,CAACJ,GAAG,GAAGD,SAAS,CAACG,MAAM,CAAC;AAC1C;;AAEA;AACA,SAASG,mBAAmBA,CAACC,GAAW,EAAU;EAChD,OAAOH,IAAI,CAACI,GAAG,CAAC,GAAG,EAAEJ,IAAI,CAACK,GAAG,CAAC,CAAC,EAAEF,GAAG,GAAG,GAAG,CAAC,CAAC;AAC9C;;AAEA;AACAG,IAAI,CAACC,SAAS,GAAIC,CAAe,IAAK;EACpC,MAAM;IAAEZ;EAAU,CAAC,GAAGY,CAAC,CAACC,IAAI;EAE5B,IAAI;IACF;IACA,MAAMN,GAAG,GAAGR,kBAAkB,CAACC,SAAS,CAAC;IACzC,MAAMc,MAAM,GAAGR,mBAAmB,CAACC,GAAG,CAAC;;IAEvC;IACAG,IAAI,CAACK,WAAW,CAAC;MACfC,IAAI,EAAE,QAAQ;MACdH,IAAI,EAAE;QACJC,MAAM;QACNG,GAAG,EAAE;UACHV;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;IACd;IACAR,IAAI,CAACK,WAAW,CAAC;MACfC,IAAI,EAAE,OAAO;MACbE,KAAK,EAAEA,KAAK,CAACC;IACf,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACAT,IAAI,CAACU,OAAO,GAAIF,KAAK,IAAK;EACxBR,IAAI,CAACK,WAAW,CAAC;IACfC,IAAI,EAAE,OAAO;IACbE,KAAK,EAAEA,KAAK,CAACC;EACf,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}