{"ast":null,"code":"export class AudioContextManager {\n  constructor() {\n    this.audioContext = null;\n    this.mediaStream = null;\n    this.analyser = null;\n    this.dataArray = null;\n    this.isInitialized = false;\n    this.initializationPromise = null;\n    this.userInteractionPromise = null;\n    this.boundUserInteractionHandler = void 0;\n    this.boundUserInteractionHandler = this.handleUserInteraction.bind(this);\n    this.setupUserInteractionPromise();\n  }\n  setupUserInteractionPromise() {\n    if (this.userInteractionPromise) return;\n    this.userInteractionPromise = new Promise(resolve => {\n      const events = ['click', 'touchstart', 'keydown'];\n      const cleanup = () => {\n        events.forEach(event => {\n          document.removeEventListener(event, this.boundUserInteractionHandler);\n        });\n      };\n      events.forEach(event => {\n        document.addEventListener(event, this.boundUserInteractionHandler, {\n          once: true\n        });\n      });\n      this.boundUserInteractionHandler.resolve = () => {\n        cleanup();\n        resolve();\n      };\n    });\n  }\n  async handleUserInteraction() {\n    try {\n      var _resolve, _ref;\n      if (this.audioContext) {\n        await this.audioContext.resume();\n      }\n      (_resolve = (_ref = this.boundUserInteractionHandler).resolve) === null || _resolve === void 0 ? void 0 : _resolve.call(_ref);\n    } catch (error) {\n      console.error('Error handling user interaction:', error);\n    }\n  }\n  async initialize() {\n    if (this.initializationPromise) {\n      return this.initializationPromise;\n    }\n    await this.userInteractionPromise;\n    this.initializationPromise = new Promise(async (resolve, reject) => {\n      try {\n        if (!this.audioContext) {\n          this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        }\n        await this.audioContext.resume();\n        this.mediaStream = await navigator.mediaDevices.getUserMedia({\n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true\n          },\n          video: false\n        });\n        const source = this.audioContext.createMediaStreamSource(this.mediaStream);\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 2048;\n        source.connect(this.analyser);\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        this.isInitialized = true;\n        resolve();\n      } catch (error) {\n        this.cleanup();\n        reject(error);\n      }\n    });\n    return this.initializationPromise;\n  }\n  cleanup() {\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    if (this.analyser) {\n      this.analyser.disconnect();\n      this.analyser = null;\n    }\n    if (this.audioContext) {\n      this.audioContext.close().catch(console.error);\n      this.audioContext = null;\n    }\n    this.dataArray = null;\n    this.isInitialized = false;\n    this.initializationPromise = null;\n    this.userInteractionPromise = null;\n    this.setupUserInteractionPromise();\n  }\n  async startMonitoring() {\n    try {\n      console.log('请点击页面任意位置以启动音频监控');\n      await this.initialize();\n    } catch (error) {\n      this.cleanup();\n      throw new Error('Failed to initialize audio context: ' + error.message);\n    }\n  }\n  stopMonitoring() {\n    this.cleanup();\n  }\n  getVolume() {\n    if (!this.analyser || !this.dataArray || !this.isInitialized) {\n      return 0;\n    }\n    try {\n      this.analyser.getByteFrequencyData(this.dataArray);\n      const average = this.dataArray.reduce((acc, value) => acc + value, 0) / this.dataArray.length;\n      return Math.min(Math.round(average / 255 * 100), 100);\n    } catch (error) {\n      console.error('Error getting volume:', error);\n      return 0;\n    }\n  }\n  isActive() {\n    return this.isInitialized && this.audioContext !== null && this.audioContext.state === 'running';\n  }\n}\nexport const audioContextManager = new AudioContextManager();","map":{"version":3,"names":["AudioContextManager","constructor","audioContext","mediaStream","analyser","dataArray","isInitialized","initializationPromise","userInteractionPromise","boundUserInteractionHandler","handleUserInteraction","bind","setupUserInteractionPromise","Promise","resolve","events","cleanup","forEach","event","document","removeEventListener","addEventListener","once","_resolve","_ref","resume","call","error","console","initialize","reject","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","video","source","createMediaStreamSource","createAnalyser","fftSize","connect","Uint8Array","frequencyBinCount","getTracks","track","stop","disconnect","close","catch","startMonitoring","log","Error","message","stopMonitoring","getVolume","getByteFrequencyData","average","reduce","acc","value","length","Math","min","round","isActive","state","audioContextManager"],"sources":["D:/projects/volume-monitor/src/utils/audioContext.ts"],"sourcesContent":["export class AudioContextManager {\r\n  private audioContext: AudioContext | null = null;\r\n  private mediaStream: MediaStream | null = null;\r\n  private analyser: AnalyserNode | null = null;\r\n  private dataArray: Uint8Array | null = null;\r\n  private isInitialized: boolean = false;\r\n  private initializationPromise: Promise<void> | null = null;\r\n  private userInteractionPromise: Promise<void> | null = null;\r\n  private boundUserInteractionHandler: () => void;\r\n\r\n  constructor() {\r\n    this.boundUserInteractionHandler = this.handleUserInteraction.bind(this);\r\n    this.setupUserInteractionPromise();\r\n  }\r\n\r\n  private setupUserInteractionPromise() {\r\n    if (this.userInteractionPromise) return;\r\n\r\n    this.userInteractionPromise = new Promise<void>((resolve) => {\r\n      const events = ['click', 'touchstart', 'keydown'];\r\n      \r\n      const cleanup = () => {\r\n        events.forEach(event => {\r\n          document.removeEventListener(event, this.boundUserInteractionHandler);\r\n        });\r\n      };\r\n\r\n      events.forEach(event => {\r\n        document.addEventListener(event, this.boundUserInteractionHandler, { once: true });\r\n      });\r\n\r\n      (this.boundUserInteractionHandler as any).resolve = () => {\r\n        cleanup();\r\n        resolve();\r\n      };\r\n    });\r\n  }\r\n\r\n  private async handleUserInteraction() {\r\n    try {\r\n      if (this.audioContext) {\r\n        await this.audioContext.resume();\r\n      }\r\n      (this.boundUserInteractionHandler as any).resolve?.();\r\n    } catch (error) {\r\n      console.error('Error handling user interaction:', error);\r\n    }\r\n  }\r\n\r\n  private async initialize() {\r\n    if (this.initializationPromise) {\r\n      return this.initializationPromise;\r\n    }\r\n\r\n    await this.userInteractionPromise;\r\n\r\n    this.initializationPromise = new Promise<void>(async (resolve, reject) => {\r\n      try {\r\n        if (!this.audioContext) {\r\n          this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n        }\r\n\r\n        await this.audioContext.resume();\r\n\r\n        this.mediaStream = await navigator.mediaDevices.getUserMedia({\r\n          audio: {\r\n            echoCancellation: true,\r\n            noiseSuppression: true,\r\n            autoGainControl: true\r\n          },\r\n          video: false\r\n        });\r\n\r\n        const source = this.audioContext.createMediaStreamSource(this.mediaStream);\r\n        this.analyser = this.audioContext.createAnalyser();\r\n        this.analyser.fftSize = 2048;\r\n        source.connect(this.analyser);\r\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n        \r\n        this.isInitialized = true;\r\n        resolve();\r\n      } catch (error) {\r\n        this.cleanup();\r\n        reject(error);\r\n      }\r\n    });\r\n\r\n    return this.initializationPromise;\r\n  }\r\n\r\n  private cleanup() {\r\n    if (this.mediaStream) {\r\n      this.mediaStream.getTracks().forEach(track => track.stop());\r\n      this.mediaStream = null;\r\n    }\r\n    if (this.analyser) {\r\n      this.analyser.disconnect();\r\n      this.analyser = null;\r\n    }\r\n    if (this.audioContext) {\r\n      this.audioContext.close().catch(console.error);\r\n      this.audioContext = null;\r\n    }\r\n    this.dataArray = null;\r\n    this.isInitialized = false;\r\n    this.initializationPromise = null;\r\n    this.userInteractionPromise = null;\r\n    this.setupUserInteractionPromise();\r\n  }\r\n\r\n  async startMonitoring() {\r\n    try {\r\n      console.log('请点击页面任意位置以启动音频监控');\r\n      await this.initialize();\r\n    } catch (error) {\r\n      this.cleanup();\r\n      throw new Error('Failed to initialize audio context: ' + (error as Error).message);\r\n    }\r\n  }\r\n\r\n  stopMonitoring() {\r\n    this.cleanup();\r\n  }\r\n\r\n  getVolume(): number {\r\n    if (!this.analyser || !this.dataArray || !this.isInitialized) {\r\n      return 0;\r\n    }\r\n\r\n    try {\r\n      this.analyser.getByteFrequencyData(this.dataArray);\r\n      const average = this.dataArray.reduce((acc, value) => acc + value, 0) / this.dataArray.length;\r\n      return Math.min(Math.round((average / 255) * 100), 100);\r\n    } catch (error) {\r\n      console.error('Error getting volume:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return this.isInitialized && this.audioContext !== null && this.audioContext.state === 'running';\r\n  }\r\n}\r\n\r\nexport const audioContextManager = new AudioContextManager(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}