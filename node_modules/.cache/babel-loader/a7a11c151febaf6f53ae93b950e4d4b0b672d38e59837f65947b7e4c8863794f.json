{"ast":null,"code":"export class AudioContextManager {\n  constructor() {\n    this.audioContext = null;\n    this.mediaStream = null;\n    this.analyser = null;\n    this.dataArray = null;\n    this.isInitialized = false;\n    // 创建 AudioContext 实例\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  }\n  async startMonitoring() {\n    if (!this.isInitialized) {\n      try {\n        // 请求麦克风权限并获取音频流\n        this.mediaStream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: false\n        });\n        if (!this.audioContext) {\n          this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        }\n\n        // 创建音频源\n        const source = this.audioContext.createMediaStreamSource(this.mediaStream);\n\n        // 创建分析器\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 2048;\n\n        // 连接音频节点\n        source.connect(this.analyser);\n\n        // 创建数据数组\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        this.isInitialized = true;\n      } catch (error) {\n        console.error('Failed to initialize audio context:', error);\n        throw error;\n      }\n    }\n  }\n  stopMonitoring() {\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    if (this.analyser) {\n      this.analyser.disconnect();\n      this.analyser = null;\n    }\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n    this.dataArray = null;\n    this.isInitialized = false;\n  }\n  getVolume() {\n    if (!this.analyser || !this.dataArray) {\n      return 0;\n    }\n\n    // 获取音频数据\n    this.analyser.getByteFrequencyData(this.dataArray);\n\n    // 计算平均音量\n    const average = this.dataArray.reduce((acc, value) => acc + value, 0) / this.dataArray.length;\n\n    // 将音量值映射到 0-100 范围\n    return Math.min(Math.round(average / 255 * 100), 100);\n  }\n  isActive() {\n    return this.isInitialized && this.audioContext !== null;\n  }\n}\nexport const audioContextManager = new AudioContextManager();","map":{"version":3,"names":["AudioContextManager","constructor","audioContext","mediaStream","analyser","dataArray","isInitialized","window","AudioContext","webkitAudioContext","startMonitoring","navigator","mediaDevices","getUserMedia","audio","video","source","createMediaStreamSource","createAnalyser","fftSize","connect","Uint8Array","frequencyBinCount","error","console","stopMonitoring","getTracks","forEach","track","stop","disconnect","close","getVolume","getByteFrequencyData","average","reduce","acc","value","length","Math","min","round","isActive","audioContextManager"],"sources":["D:/projects/volume-monitor/src/utils/audioContext.ts"],"sourcesContent":["export class AudioContextManager {\r\n  private audioContext: AudioContext | null = null;\r\n  private mediaStream: MediaStream | null = null;\r\n  private analyser: AnalyserNode | null = null;\r\n  private dataArray: Uint8Array | null = null;\r\n  private isInitialized: boolean = false;\r\n\r\n  constructor() {\r\n    // 创建 AudioContext 实例\r\n    this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n  }\r\n\r\n  async startMonitoring() {\r\n    if (!this.isInitialized) {\r\n      try {\r\n        // 请求麦克风权限并获取音频流\r\n        this.mediaStream = await navigator.mediaDevices.getUserMedia({\r\n          audio: true,\r\n          video: false\r\n        });\r\n\r\n        if (!this.audioContext) {\r\n          this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n        }\r\n\r\n        // 创建音频源\r\n        const source = this.audioContext.createMediaStreamSource(this.mediaStream);\r\n        \r\n        // 创建分析器\r\n        this.analyser = this.audioContext.createAnalyser();\r\n        this.analyser.fftSize = 2048;\r\n        \r\n        // 连接音频节点\r\n        source.connect(this.analyser);\r\n        \r\n        // 创建数据数组\r\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n        \r\n        this.isInitialized = true;\r\n      } catch (error) {\r\n        console.error('Failed to initialize audio context:', error);\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n\r\n  stopMonitoring() {\r\n    if (this.mediaStream) {\r\n      this.mediaStream.getTracks().forEach(track => track.stop());\r\n      this.mediaStream = null;\r\n    }\r\n    if (this.analyser) {\r\n      this.analyser.disconnect();\r\n      this.analyser = null;\r\n    }\r\n    if (this.audioContext) {\r\n      this.audioContext.close();\r\n      this.audioContext = null;\r\n    }\r\n    this.dataArray = null;\r\n    this.isInitialized = false;\r\n  }\r\n\r\n  getVolume(): number {\r\n    if (!this.analyser || !this.dataArray) {\r\n      return 0;\r\n    }\r\n\r\n    // 获取音频数据\r\n    this.analyser.getByteFrequencyData(this.dataArray);\r\n\r\n    // 计算平均音量\r\n    const average = this.dataArray.reduce((acc, value) => acc + value, 0) / this.dataArray.length;\r\n    \r\n    // 将音量值映射到 0-100 范围\r\n    return Math.min(Math.round((average / 255) * 100), 100);\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return this.isInitialized && this.audioContext !== null;\r\n  }\r\n}\r\n\r\nexport const audioContextManager = new AudioContextManager(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}