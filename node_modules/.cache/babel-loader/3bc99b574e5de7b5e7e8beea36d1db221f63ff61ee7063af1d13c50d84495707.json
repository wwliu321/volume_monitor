{"ast":null,"code":"import { alertSound } from './alertSound';\nclass AlertManager {\n  constructor(options) {\n    this.options = void 0;\n    this.state = void 0;\n    this.onVisualAlert = void 0;\n    this.onTextAlert = void 0;\n    this.options = {\n      textEnabled: true,\n      soundEnabled: true,\n      minInterval: 15000,\n      // 默认15秒最小间隔\n      silentPeriod: 5000,\n      // 默认5秒静默期\n      ...options\n    };\n    this.state = {\n      lastAlertTime: 0,\n      consecutiveLowVolume: 0,\n      currentLevel: 'none'\n    };\n  }\n  setCallbacks(callbacks) {\n    this.onVisualAlert = callbacks.onVisualAlert;\n    this.onTextAlert = callbacks.onTextAlert;\n  }\n  updateOptions(newOptions) {\n    this.options = {\n      ...this.options,\n      ...newOptions\n    };\n  }\n  handleVolume(volume, threshold) {\n    var _this$onVisualAlert;\n    const now = Date.now();\n    const isLow = volume < threshold;\n\n    // 更新视觉提示\n    (_this$onVisualAlert = this.onVisualAlert) === null || _this$onVisualAlert === void 0 ? void 0 : _this$onVisualAlert.call(this, isLow);\n    if (isLow) {\n      this.state.consecutiveLowVolume++;\n\n      // 检查是否可以触发新的提示\n      if (now - this.state.lastAlertTime >= (this.options.minInterval || 0)) {\n        this.triggerAlert(volume, this.state.consecutiveLowVolume);\n        this.state.lastAlertTime = now;\n      }\n    } else {\n      this.state.consecutiveLowVolume = 0;\n      this.state.currentLevel = 'none';\n    }\n  }\n  triggerAlert(volume, consecutiveCount) {\n    let newLevel = 'none';\n    if (consecutiveCount >= 10) {\n      newLevel = 'sound';\n    } else if (consecutiveCount >= 5) {\n      newLevel = 'text';\n    } else if (consecutiveCount >= 2) {\n      newLevel = 'visual';\n    }\n    if (newLevel !== this.state.currentLevel) {\n      this.state.currentLevel = newLevel;\n      switch (newLevel) {\n        case 'sound':\n          if (this.options.soundEnabled) {\n            alertSound.playAlert(440, 200);\n            // 声音提示后也显示文字提示\n            if (this.options.textEnabled) {\n              var _this$onTextAlert;\n              (_this$onTextAlert = this.onTextAlert) === null || _this$onTextAlert === void 0 ? void 0 : _this$onTextAlert.call(this, `声音持续过低 (${volume.toFixed(1)}%)，请调整说话音量`, 'warning');\n            }\n          }\n          break;\n        case 'text':\n          if (this.options.textEnabled) {\n            var _this$onTextAlert2;\n            (_this$onTextAlert2 = this.onTextAlert) === null || _this$onTextAlert2 === void 0 ? void 0 : _this$onTextAlert2.call(this, `声音持续过低 (${volume.toFixed(1)}%)，请调整说话音量`, 'warning');\n          }\n          break;\n        case 'visual':\n          // 视觉提示已经通过 onVisualAlert 处理\n          break;\n      }\n    }\n  }\n  reset() {\n    this.state = {\n      lastAlertTime: 0,\n      consecutiveLowVolume: 0,\n      currentLevel: 'none'\n    };\n  }\n}\nexport const alertManager = new AlertManager({\n  textEnabled: true,\n  soundEnabled: true\n});","map":{"version":3,"names":["alertSound","AlertManager","constructor","options","state","onVisualAlert","onTextAlert","textEnabled","soundEnabled","minInterval","silentPeriod","lastAlertTime","consecutiveLowVolume","currentLevel","setCallbacks","callbacks","updateOptions","newOptions","handleVolume","volume","threshold","_this$onVisualAlert","now","Date","isLow","call","triggerAlert","consecutiveCount","newLevel","playAlert","_this$onTextAlert","toFixed","_this$onTextAlert2","reset","alertManager"],"sources":["D:/projects/volume-monitor/src/utils/alertManager.ts"],"sourcesContent":["import { alertSound } from './alertSound';\r\n\r\ninterface AlertOptions {\r\n  textEnabled: boolean;\r\n  soundEnabled: boolean;\r\n  minInterval?: number;  // 最小提示间隔（毫秒）\r\n  silentPeriod?: number;  // 静默期（毫秒）\r\n}\r\n\r\ninterface AlertState {\r\n  lastAlertTime: number;\r\n  consecutiveLowVolume: number;\r\n  currentLevel: 'none' | 'visual' | 'text' | 'sound';\r\n}\r\n\r\nclass AlertManager {\r\n  private options: AlertOptions;\r\n  private state: AlertState;\r\n  private onVisualAlert?: (isLow: boolean) => void;\r\n  private onTextAlert?: (message: string, type: string) => void;\r\n\r\n  constructor(options: AlertOptions) {\r\n    this.options = {\r\n      textEnabled: true,\r\n      soundEnabled: true,\r\n      minInterval: 15000,  // 默认15秒最小间隔\r\n      silentPeriod: 5000,  // 默认5秒静默期\r\n      ...options\r\n    };\r\n\r\n    this.state = {\r\n      lastAlertTime: 0,\r\n      consecutiveLowVolume: 0,\r\n      currentLevel: 'none'\r\n    };\r\n  }\r\n\r\n  public setCallbacks(callbacks: {\r\n    onVisualAlert?: (isLow: boolean) => void;\r\n    onTextAlert?: (message: string, type: string) => void;\r\n  }) {\r\n    this.onVisualAlert = callbacks.onVisualAlert;\r\n    this.onTextAlert = callbacks.onTextAlert;\r\n  }\r\n\r\n  public updateOptions(newOptions: Partial<AlertOptions>) {\r\n    this.options = { ...this.options, ...newOptions };\r\n  }\r\n\r\n  public handleVolume(volume: number, threshold: number) {\r\n    const now = Date.now();\r\n    const isLow = volume < threshold;\r\n\r\n    // 更新视觉提示\r\n    this.onVisualAlert?.(isLow);\r\n\r\n    if (isLow) {\r\n      this.state.consecutiveLowVolume++;\r\n      \r\n      // 检查是否可以触发新的提示\r\n      if (now - this.state.lastAlertTime >= (this.options.minInterval || 0)) {\r\n        this.triggerAlert(volume, this.state.consecutiveLowVolume);\r\n        this.state.lastAlertTime = now;\r\n      }\r\n    } else {\r\n      this.state.consecutiveLowVolume = 0;\r\n      this.state.currentLevel = 'none';\r\n    }\r\n  }\r\n\r\n  private triggerAlert(volume: number, consecutiveCount: number) {\r\n    let newLevel: AlertState['currentLevel'] = 'none';\r\n    \r\n    if (consecutiveCount >= 10) {\r\n      newLevel = 'sound';\r\n    } else if (consecutiveCount >= 5) {\r\n      newLevel = 'text';\r\n    } else if (consecutiveCount >= 2) {\r\n      newLevel = 'visual';\r\n    }\r\n\r\n    if (newLevel !== this.state.currentLevel) {\r\n      this.state.currentLevel = newLevel;\r\n\r\n      switch (newLevel) {\r\n        case 'sound':\r\n          if (this.options.soundEnabled) {\r\n            alertSound.playAlert(440, 200);\r\n            // 声音提示后也显示文字提示\r\n            if (this.options.textEnabled) {\r\n              this.onTextAlert?.(\r\n                `声音持续过低 (${volume.toFixed(1)}%)，请调整说话音量`,\r\n                'warning'\r\n              );\r\n            }\r\n          }\r\n          break;\r\n        \r\n        case 'text':\r\n          if (this.options.textEnabled) {\r\n            this.onTextAlert?.(\r\n              `声音持续过低 (${volume.toFixed(1)}%)，请调整说话音量`,\r\n              'warning'\r\n            );\r\n          }\r\n          break;\r\n        \r\n        case 'visual':\r\n          // 视觉提示已经通过 onVisualAlert 处理\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public reset() {\r\n    this.state = {\r\n      lastAlertTime: 0,\r\n      consecutiveLowVolume: 0,\r\n      currentLevel: 'none'\r\n    };\r\n  }\r\n}\r\n\r\nexport const alertManager = new AlertManager({\r\n  textEnabled: true,\r\n  soundEnabled: true\r\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}