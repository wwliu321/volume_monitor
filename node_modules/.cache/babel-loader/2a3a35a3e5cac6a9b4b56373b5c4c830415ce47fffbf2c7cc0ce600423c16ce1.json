{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from 'react';\nexport const useAudioMonitor = ({\n  threshold,\n  lowVolumeDuration,\n  onVolumeLow,\n  onLowVolumeDurationUpdate\n}) => {\n  _s();\n  const [volume, setVolume] = useState(0);\n  const [error, setError] = useState(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const sourceRef = useRef(null);\n  const streamRef = useRef(null);\n  const isRunningRef = useRef(false);\n  const lowVolumeStartTimeRef = useRef(null);\n  const configuredDurationRef = useRef(lowVolumeDuration);\n  const analyzeTimeoutRef = useRef(null);\n\n  // 确保配置更新时立即更新 ref 值\n  useEffect(() => {\n    const oldDuration = configuredDurationRef.current;\n    configuredDurationRef.current = lowVolumeDuration;\n    console.log('配置更新:', {\n      旧配置: oldDuration,\n      新配置: lowVolumeDuration,\n      实际更新后的值: configuredDurationRef.current\n    });\n  }, [lowVolumeDuration]);\n  const analyze = useCallback(() => {\n    if (!analyserRef.current || !isRunningRef.current) return;\n    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n    analyserRef.current.getByteFrequencyData(dataArray);\n    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n    const normalizedVolume = Math.round(average / 255 * 100);\n    setVolume(normalizedVolume);\n    const now = Date.now();\n    if (normalizedVolume < threshold) {\n      if (lowVolumeStartTimeRef.current === null) {\n        console.log('开始新的低音量计时 - 当前配置:', {\n          目标持续时间: configuredDurationRef.current,\n          实际配置值: lowVolumeDuration\n        });\n        lowVolumeStartTimeRef.current = now;\n      }\n      const duration = now - lowVolumeStartTimeRef.current;\n      onLowVolumeDurationUpdate(duration);\n\n      // 详细的调试信息\n      console.log('检查触发条件:', {\n        当前持续时间: duration,\n        目标持续时间: configuredDurationRef.current,\n        原始配置值: lowVolumeDuration,\n        差值: Math.abs(duration - configuredDurationRef.current)\n      });\n\n      // 严格判断：只有当持续时间达到配置值时才触发\n      if (duration >= configuredDurationRef.current) {\n        console.log('触发提醒:', {\n          触发时的持续时间: duration,\n          目标持续时间: configuredDurationRef.current,\n          原始配置值: lowVolumeDuration\n        });\n        onVolumeLow();\n        lowVolumeStartTimeRef.current = now;\n        onLowVolumeDurationUpdate(0);\n      }\n    } else {\n      if (lowVolumeStartTimeRef.current !== null) {\n        console.log('音量恢复正常，重置计时器');\n        lowVolumeStartTimeRef.current = null;\n        onLowVolumeDurationUpdate(0);\n      }\n    }\n    if (analyzeTimeoutRef.current) {\n      clearTimeout(analyzeTimeoutRef.current);\n    }\n    analyzeTimeoutRef.current = setTimeout(analyze, 100);\n  }, [threshold, onVolumeLow, onLowVolumeDurationUpdate, lowVolumeDuration]); // 添加 lowVolumeDuration 到依赖\n\n  const stopMonitoring = useCallback(() => {\n    console.log('Stopping monitoring');\n    isRunningRef.current = false;\n    if (sourceRef.current) {\n      sourceRef.current.disconnect();\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n    lowVolumeStartTimeRef.current = null;\n    onLowVolumeDurationUpdate(0);\n  }, [onLowVolumeDurationUpdate]);\n  const startMonitoring = useCallback(async () => {\n    try {\n      if (!navigator.mediaDevices) {\n        throw new Error('浏览器不支持音频输入');\n      }\n      console.log('Starting monitoring with duration:', lowVolumeDuration);\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      streamRef.current = stream;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      audioContextRef.current = audioContext;\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      analyserRef.current = analyser;\n      const source = audioContext.createMediaStreamSource(stream);\n      source.connect(analyser);\n      sourceRef.current = source;\n      lowVolumeStartTimeRef.current = null;\n      isRunningRef.current = true;\n      analyze();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : '未知错误');\n    }\n  }, [analyze]);\n  useEffect(() => {\n    return () => {\n      stopMonitoring();\n    };\n  }, [stopMonitoring]);\n  return {\n    volume,\n    error,\n    startMonitoring,\n    stopMonitoring\n  };\n};\n_s(useAudioMonitor, \"yQ7U9VGqd90kAw5G62NGn3hsGho=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","useAudioMonitor","threshold","lowVolumeDuration","onVolumeLow","onLowVolumeDurationUpdate","_s","volume","setVolume","error","setError","audioContextRef","analyserRef","sourceRef","streamRef","isRunningRef","lowVolumeStartTimeRef","configuredDurationRef","analyzeTimeoutRef","oldDuration","current","console","log","旧配置","新配置","实际更新后的值","analyze","dataArray","Uint8Array","frequencyBinCount","getByteFrequencyData","average","reduce","a","b","length","normalizedVolume","Math","round","now","Date","目标持续时间","实际配置值","duration","当前持续时间","原始配置值","差值","abs","触发时的持续时间","clearTimeout","setTimeout","stopMonitoring","disconnect","close","getTracks","forEach","track","stop","startMonitoring","navigator","mediaDevices","Error","stream","getUserMedia","audio","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","source","createMediaStreamSource","connect","err","message"],"sources":["D:/projects/volume-monitor/src/hooks/useAudioMonitor.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\r\n\r\ninterface AudioMonitorProps {\r\n  threshold: number;\r\n  lowVolumeDuration: number;\r\n  onVolumeLow: () => void;\r\n  onLowVolumeDurationUpdate: (duration: number) => void;\r\n}\r\n\r\nexport const useAudioMonitor = ({\r\n  threshold,\r\n  lowVolumeDuration,\r\n  onVolumeLow,\r\n  onLowVolumeDurationUpdate,\r\n}: AudioMonitorProps) => {\r\n  const [volume, setVolume] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n  const analyserRef = useRef<AnalyserNode | null>(null);\r\n  const sourceRef = useRef<MediaStreamAudioSourceNode | null>(null);\r\n  const streamRef = useRef<MediaStream | null>(null);\r\n  const isRunningRef = useRef(false);\r\n  const lowVolumeStartTimeRef = useRef<number | null>(null);\r\n  const configuredDurationRef = useRef(lowVolumeDuration);\r\n  const analyzeTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // 确保配置更新时立即更新 ref 值\r\n  useEffect(() => {\r\n    const oldDuration = configuredDurationRef.current;\r\n    configuredDurationRef.current = lowVolumeDuration;\r\n    console.log('配置更新:', {\r\n      旧配置: oldDuration,\r\n      新配置: lowVolumeDuration,\r\n      实际更新后的值: configuredDurationRef.current\r\n    });\r\n  }, [lowVolumeDuration]);\r\n\r\n  const analyze = useCallback(() => {\r\n    if (!analyserRef.current || !isRunningRef.current) return;\r\n\r\n    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\r\n    analyserRef.current.getByteFrequencyData(dataArray);\r\n\r\n    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\r\n    const normalizedVolume = Math.round((average / 255) * 100);\r\n    setVolume(normalizedVolume);\r\n\r\n    const now = Date.now();\r\n    if (normalizedVolume < threshold) {\r\n      if (lowVolumeStartTimeRef.current === null) {\r\n        console.log('开始新的低音量计时 - 当前配置:', {\r\n          目标持续时间: configuredDurationRef.current,\r\n          实际配置值: lowVolumeDuration\r\n        });\r\n        lowVolumeStartTimeRef.current = now;\r\n      }\r\n\r\n      const duration = now - lowVolumeStartTimeRef.current;\r\n      onLowVolumeDurationUpdate(duration);\r\n\r\n      // 详细的调试信息\r\n      console.log('检查触发条件:', {\r\n        当前持续时间: duration,\r\n        目标持续时间: configuredDurationRef.current,\r\n        原始配置值: lowVolumeDuration,\r\n        差值: Math.abs(duration - configuredDurationRef.current)\r\n      });\r\n\r\n      // 严格判断：只有当持续时间达到配置值时才触发\r\n      if (duration >= configuredDurationRef.current) {\r\n        console.log('触发提醒:', {\r\n          触发时的持续时间: duration,\r\n          目标持续时间: configuredDurationRef.current,\r\n          原始配置值: lowVolumeDuration\r\n        });\r\n        onVolumeLow();\r\n        lowVolumeStartTimeRef.current = now;\r\n        onLowVolumeDurationUpdate(0);\r\n      }\r\n    } else {\r\n      if (lowVolumeStartTimeRef.current !== null) {\r\n        console.log('音量恢复正常，重置计时器');\r\n        lowVolumeStartTimeRef.current = null;\r\n        onLowVolumeDurationUpdate(0);\r\n      }\r\n    }\r\n\r\n    if (analyzeTimeoutRef.current) {\r\n      clearTimeout(analyzeTimeoutRef.current);\r\n    }\r\n    analyzeTimeoutRef.current = setTimeout(analyze, 100);\r\n  }, [threshold, onVolumeLow, onLowVolumeDurationUpdate, lowVolumeDuration]); // 添加 lowVolumeDuration 到依赖\r\n\r\n  const stopMonitoring = useCallback(() => {\r\n    console.log('Stopping monitoring');\r\n    isRunningRef.current = false;\r\n    if (sourceRef.current) {\r\n      sourceRef.current.disconnect();\r\n    }\r\n    if (audioContextRef.current) {\r\n      audioContextRef.current.close();\r\n    }\r\n    if (streamRef.current) {\r\n      streamRef.current.getTracks().forEach(track => track.stop());\r\n    }\r\n    lowVolumeStartTimeRef.current = null;\r\n    onLowVolumeDurationUpdate(0);\r\n  }, [onLowVolumeDurationUpdate]);\r\n\r\n  const startMonitoring = useCallback(async () => {\r\n    try {\r\n      if (!navigator.mediaDevices) {\r\n        throw new Error('浏览器不支持音频输入');\r\n      }\r\n\r\n      console.log('Starting monitoring with duration:', lowVolumeDuration);\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      streamRef.current = stream;\r\n\r\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n      audioContextRef.current = audioContext;\r\n\r\n      const analyser = audioContext.createAnalyser();\r\n      analyser.fftSize = 256;\r\n      analyserRef.current = analyser;\r\n\r\n      const source = audioContext.createMediaStreamSource(stream);\r\n      source.connect(analyser);\r\n      sourceRef.current = source;\r\n\r\n      lowVolumeStartTimeRef.current = null;\r\n      isRunningRef.current = true;\r\n      analyze();\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : '未知错误');\r\n    }\r\n  }, [analyze]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      stopMonitoring();\r\n    };\r\n  }, [stopMonitoring]);\r\n\r\n  return {\r\n    volume,\r\n    error,\r\n    startMonitoring,\r\n    stopMonitoring,\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAShE,OAAO,MAAMC,eAAe,GAAGA,CAAC;EAC9BC,SAAS;EACTC,iBAAiB;EACjBC,WAAW;EACXC;AACiB,CAAC,KAAK;EAAAC,EAAA;EACvB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAMc,eAAe,GAAGX,MAAM,CAAsB,IAAI,CAAC;EACzD,MAAMY,WAAW,GAAGZ,MAAM,CAAsB,IAAI,CAAC;EACrD,MAAMa,SAAS,GAAGb,MAAM,CAAoC,IAAI,CAAC;EACjE,MAAMc,SAAS,GAAGd,MAAM,CAAqB,IAAI,CAAC;EAClD,MAAMe,YAAY,GAAGf,MAAM,CAAC,KAAK,CAAC;EAClC,MAAMgB,qBAAqB,GAAGhB,MAAM,CAAgB,IAAI,CAAC;EACzD,MAAMiB,qBAAqB,GAAGjB,MAAM,CAACG,iBAAiB,CAAC;EACvD,MAAMe,iBAAiB,GAAGlB,MAAM,CAAwB,IAAI,CAAC;;EAE7D;EACAF,SAAS,CAAC,MAAM;IACd,MAAMqB,WAAW,GAAGF,qBAAqB,CAACG,OAAO;IACjDH,qBAAqB,CAACG,OAAO,GAAGjB,iBAAiB;IACjDkB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE;MACnBC,GAAG,EAAEJ,WAAW;MAChBK,GAAG,EAAErB,iBAAiB;MACtBsB,OAAO,EAAER,qBAAqB,CAACG;IACjC,CAAC,CAAC;EACJ,CAAC,EAAE,CAACjB,iBAAiB,CAAC,CAAC;EAEvB,MAAMuB,OAAO,GAAG3B,WAAW,CAAC,MAAM;IAChC,IAAI,CAACa,WAAW,CAACQ,OAAO,IAAI,CAACL,YAAY,CAACK,OAAO,EAAE;IAEnD,MAAMO,SAAS,GAAG,IAAIC,UAAU,CAAChB,WAAW,CAACQ,OAAO,CAACS,iBAAiB,CAAC;IACvEjB,WAAW,CAACQ,OAAO,CAACU,oBAAoB,CAACH,SAAS,CAAC;IAEnD,MAAMI,OAAO,GAAGJ,SAAS,CAACK,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,GAAGP,SAAS,CAACQ,MAAM;IACpE,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAEP,OAAO,GAAG,GAAG,GAAI,GAAG,CAAC;IAC1DvB,SAAS,CAAC4B,gBAAgB,CAAC;IAE3B,MAAMG,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;IACtB,IAAIH,gBAAgB,GAAGlC,SAAS,EAAE;MAChC,IAAIc,qBAAqB,CAACI,OAAO,KAAK,IAAI,EAAE;QAC1CC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE;UAC/BmB,MAAM,EAAExB,qBAAqB,CAACG,OAAO;UACrCsB,KAAK,EAAEvC;QACT,CAAC,CAAC;QACFa,qBAAqB,CAACI,OAAO,GAAGmB,GAAG;MACrC;MAEA,MAAMI,QAAQ,GAAGJ,GAAG,GAAGvB,qBAAqB,CAACI,OAAO;MACpDf,yBAAyB,CAACsC,QAAQ,CAAC;;MAEnC;MACAtB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE;QACrBsB,MAAM,EAAED,QAAQ;QAChBF,MAAM,EAAExB,qBAAqB,CAACG,OAAO;QACrCyB,KAAK,EAAE1C,iBAAiB;QACxB2C,EAAE,EAAET,IAAI,CAACU,GAAG,CAACJ,QAAQ,GAAG1B,qBAAqB,CAACG,OAAO;MACvD,CAAC,CAAC;;MAEF;MACA,IAAIuB,QAAQ,IAAI1B,qBAAqB,CAACG,OAAO,EAAE;QAC7CC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE;UACnB0B,QAAQ,EAAEL,QAAQ;UAClBF,MAAM,EAAExB,qBAAqB,CAACG,OAAO;UACrCyB,KAAK,EAAE1C;QACT,CAAC,CAAC;QACFC,WAAW,CAAC,CAAC;QACbY,qBAAqB,CAACI,OAAO,GAAGmB,GAAG;QACnClC,yBAAyB,CAAC,CAAC,CAAC;MAC9B;IACF,CAAC,MAAM;MACL,IAAIW,qBAAqB,CAACI,OAAO,KAAK,IAAI,EAAE;QAC1CC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3BN,qBAAqB,CAACI,OAAO,GAAG,IAAI;QACpCf,yBAAyB,CAAC,CAAC,CAAC;MAC9B;IACF;IAEA,IAAIa,iBAAiB,CAACE,OAAO,EAAE;MAC7B6B,YAAY,CAAC/B,iBAAiB,CAACE,OAAO,CAAC;IACzC;IACAF,iBAAiB,CAACE,OAAO,GAAG8B,UAAU,CAACxB,OAAO,EAAE,GAAG,CAAC;EACtD,CAAC,EAAE,CAACxB,SAAS,EAAEE,WAAW,EAAEC,yBAAyB,EAAEF,iBAAiB,CAAC,CAAC,CAAC,CAAC;;EAE5E,MAAMgD,cAAc,GAAGpD,WAAW,CAAC,MAAM;IACvCsB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClCP,YAAY,CAACK,OAAO,GAAG,KAAK;IAC5B,IAAIP,SAAS,CAACO,OAAO,EAAE;MACrBP,SAAS,CAACO,OAAO,CAACgC,UAAU,CAAC,CAAC;IAChC;IACA,IAAIzC,eAAe,CAACS,OAAO,EAAE;MAC3BT,eAAe,CAACS,OAAO,CAACiC,KAAK,CAAC,CAAC;IACjC;IACA,IAAIvC,SAAS,CAACM,OAAO,EAAE;MACrBN,SAAS,CAACM,OAAO,CAACkC,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;IAC9D;IACAzC,qBAAqB,CAACI,OAAO,GAAG,IAAI;IACpCf,yBAAyB,CAAC,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACA,yBAAyB,CAAC,CAAC;EAE/B,MAAMqD,eAAe,GAAG3D,WAAW,CAAC,YAAY;IAC9C,IAAI;MACF,IAAI,CAAC4D,SAAS,CAACC,YAAY,EAAE;QAC3B,MAAM,IAAIC,KAAK,CAAC,YAAY,CAAC;MAC/B;MAEAxC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEnB,iBAAiB,CAAC;MACpE,MAAM2D,MAAM,GAAG,MAAMH,SAAS,CAACC,YAAY,CAACG,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzElD,SAAS,CAACM,OAAO,GAAG0C,MAAM;MAE1B,MAAMG,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAKD,MAAM,CAASE,kBAAkB,EAAE,CAAC;MACtFzD,eAAe,CAACS,OAAO,GAAG6C,YAAY;MAEtC,MAAMI,QAAQ,GAAGJ,YAAY,CAACK,cAAc,CAAC,CAAC;MAC9CD,QAAQ,CAACE,OAAO,GAAG,GAAG;MACtB3D,WAAW,CAACQ,OAAO,GAAGiD,QAAQ;MAE9B,MAAMG,MAAM,GAAGP,YAAY,CAACQ,uBAAuB,CAACX,MAAM,CAAC;MAC3DU,MAAM,CAACE,OAAO,CAACL,QAAQ,CAAC;MACxBxD,SAAS,CAACO,OAAO,GAAGoD,MAAM;MAE1BxD,qBAAqB,CAACI,OAAO,GAAG,IAAI;MACpCL,YAAY,CAACK,OAAO,GAAG,IAAI;MAC3BM,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,OAAOiD,GAAG,EAAE;MACZjE,QAAQ,CAACiE,GAAG,YAAYd,KAAK,GAAGc,GAAG,CAACC,OAAO,GAAG,MAAM,CAAC;IACvD;EACF,CAAC,EAAE,CAAClD,OAAO,CAAC,CAAC;EAEb5B,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXqD,cAAc,CAAC,CAAC;IAClB,CAAC;EACH,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB,OAAO;IACL5C,MAAM;IACNE,KAAK;IACLiD,eAAe;IACfP;EACF,CAAC;AACH,CAAC;AAAC7C,EAAA,CA7IWL,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}