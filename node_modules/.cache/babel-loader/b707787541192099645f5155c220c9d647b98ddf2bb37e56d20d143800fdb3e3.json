{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from 'react';\nexport const useAudioMonitor = ({\n  threshold = 30,\n  lowVolumeDuration = 3000,\n  onVolumeLow,\n  onLowVolumeDurationUpdate,\n  sampleInterval = 50\n} = {}) => {\n  _s();\n  const [volume, setVolume] = useState(0);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [error, setError] = useState(null);\n  const animationFrameId = useRef(null);\n  const lastUpdateTime = useRef(0);\n  const lowVolumeStartTime = useRef(null);\n  const previousDuration = useRef(lowVolumeDuration);\n  const previousThreshold = useRef(threshold);\n  const currentDuration = useRef(lowVolumeDuration);\n  const currentThreshold = useRef(threshold);\n\n  // 监听配置变更并同步更新计时器和阈值\n  useEffect(() => {\n    if (previousDuration.current !== lowVolumeDuration) {\n      currentDuration.current = lowVolumeDuration;\n      previousDuration.current = lowVolumeDuration;\n    }\n    if (previousThreshold.current !== threshold) {\n      currentThreshold.current = threshold;\n      previousThreshold.current = threshold;\n    }\n  }, [lowVolumeDuration, threshold]);\n  const updateVolume = useCallback(() => {\n    const now = Date.now();\n    if (now - lastUpdateTime.current >= sampleInterval) {\n      const currentVolume = audioContextManager.getVolume();\n      setVolume(currentVolume);\n      lastUpdateTime.current = now;\n\n      // 使用当前阈值进行判断\n      if (currentVolume >= currentThreshold.current) {\n        // 音量达到阈值，重置计时器并开始新的计时\n        lowVolumeStartTime.current = now;\n        onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n      } else {\n        // 音量低于阈值\n        if (lowVolumeStartTime.current === null) {\n          // 开始新的计时\n          lowVolumeStartTime.current = now;\n          onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n        } else {\n          // 继续计时\n          const duration = now - lowVolumeStartTime.current;\n          if (duration >= currentDuration.current) {\n            // 只有在低音量持续时间达到配置时长时才触发提醒\n            onVolumeLow === null || onVolumeLow === void 0 ? void 0 : onVolumeLow();\n            alertManager.trigger('sound');\n            // 重新开始计时\n            lowVolumeStartTime.current = now;\n            onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n          } else {\n            // 未达到持续时间时，只更新显示\n            onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(duration);\n          }\n        }\n      }\n    }\n    animationFrameId.current = requestAnimationFrame(updateVolume);\n  }, [threshold, onVolumeLow, sampleInterval, onLowVolumeDurationUpdate]);\n\n  // ... 其余代码保持不变\n};\n_s(useAudioMonitor, \"ZCCgmr4rrlV4ImimAbCJU0npe/M=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","useAudioMonitor","threshold","lowVolumeDuration","onVolumeLow","onLowVolumeDurationUpdate","sampleInterval","_s","volume","setVolume","isMonitoring","setIsMonitoring","error","setError","animationFrameId","lastUpdateTime","lowVolumeStartTime","previousDuration","previousThreshold","currentDuration","currentThreshold","current","updateVolume","now","Date","currentVolume","audioContextManager","getVolume","duration","alertManager","trigger","requestAnimationFrame"],"sources":["D:/projects/volume-monitor/src/hooks/useAudioMonitor.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\r\n\r\ninterface AudioMonitorProps {\r\n  threshold: number;\r\n  lowVolumeDuration: number;\r\n  onVolumeLow: () => void;\r\n  onLowVolumeDurationUpdate: (duration: number) => void;\r\n  sampleInterval: number;\r\n}\r\n\r\nexport const useAudioMonitor = ({\r\n  threshold = 30,\r\n  lowVolumeDuration = 3000,\r\n  onVolumeLow,\r\n  onLowVolumeDurationUpdate,\r\n  sampleInterval = 50\r\n}: AudioMonitorProps = {}) => {\r\n  const [volume, setVolume] = useState<number>(0);\r\n  const [isMonitoring, setIsMonitoring] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const animationFrameId = useRef<number | null>(null);\r\n  const lastUpdateTime = useRef<number>(0);\r\n  const lowVolumeStartTime = useRef<number | null>(null);\r\n  const previousDuration = useRef<number>(lowVolumeDuration);\r\n  const previousThreshold = useRef<number>(threshold);\r\n  const currentDuration = useRef<number>(lowVolumeDuration);\r\n  const currentThreshold = useRef<number>(threshold);\r\n\r\n  // 监听配置变更并同步更新计时器和阈值\r\n  useEffect(() => {\r\n    if (previousDuration.current !== lowVolumeDuration) {\r\n      currentDuration.current = lowVolumeDuration;\r\n      previousDuration.current = lowVolumeDuration;\r\n    }\r\n    \r\n    if (previousThreshold.current !== threshold) {\r\n      currentThreshold.current = threshold;\r\n      previousThreshold.current = threshold;\r\n    }\r\n  }, [lowVolumeDuration, threshold]);\r\n\r\n  const updateVolume = useCallback(() => {\r\n    const now = Date.now();\r\n    if (now - lastUpdateTime.current >= sampleInterval) {\r\n      const currentVolume = audioContextManager.getVolume();\r\n      setVolume(currentVolume);\r\n      lastUpdateTime.current = now;\r\n\r\n      // 使用当前阈值进行判断\r\n      if (currentVolume >= currentThreshold.current) {\r\n        // 音量达到阈值，重置计时器并开始新的计时\r\n        lowVolumeStartTime.current = now;\r\n        onLowVolumeDurationUpdate?.(0);\r\n      } else {\r\n        // 音量低于阈值\r\n        if (lowVolumeStartTime.current === null) {\r\n          // 开始新的计时\r\n          lowVolumeStartTime.current = now;\r\n          onLowVolumeDurationUpdate?.(0);\r\n        } else {\r\n          // 继续计时\r\n          const duration = now - lowVolumeStartTime.current;\r\n          \r\n          if (duration >= currentDuration.current) {\r\n            // 只有在低音量持续时间达到配置时长时才触发提醒\r\n            onVolumeLow?.();\r\n            alertManager.trigger('sound');\r\n            // 重新开始计时\r\n            lowVolumeStartTime.current = now;\r\n            onLowVolumeDurationUpdate?.(0);\r\n          } else {\r\n            // 未达到持续时间时，只更新显示\r\n            onLowVolumeDurationUpdate?.(duration);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    animationFrameId.current = requestAnimationFrame(updateVolume);\r\n  }, [threshold, onVolumeLow, sampleInterval, onLowVolumeDurationUpdate]);\r\n\r\n  // ... 其余代码保持不变\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}