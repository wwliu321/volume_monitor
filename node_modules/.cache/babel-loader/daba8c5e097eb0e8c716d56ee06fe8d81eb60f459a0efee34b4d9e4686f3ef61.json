{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { audioContextManager } from '../utils/audioContext';\nexport function useAudioMonitor({\n  threshold = 30,\n  onVolumeLow,\n  sampleInterval = 100\n} = {}) {\n  _s();\n  const [volume, setVolume] = useState(0);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [error, setError] = useState(null);\n  const volumeWorker = useRef(null);\n  const animationFrameId = useRef(null);\n  const startMonitoring = useCallback(async () => {\n    try {\n      await audioContextManager.startMonitoring();\n\n      // 初始化Web Worker\n      if (!volumeWorker.current) {\n        volumeWorker.current = new Worker(new URL('../workers/volumeWorker.ts', import.meta.url), {\n          type: 'module'\n        });\n        volumeWorker.current.onmessage = e => {\n          if (e.data.type === 'volume') {\n            const {\n              volume: newVolume\n            } = e.data.data;\n            setVolume(newVolume);\n            if (newVolume < threshold && onVolumeLow) {\n              onVolumeLow(newVolume);\n            }\n          } else if (e.data.type === 'error') {\n            console.error('Worker error:', e.data.error);\n          }\n        };\n      }\n      const updateVolume = () => {\n        if (!volumeWorker.current) return;\n        const dataArray = audioContextManager.getVolume();\n        if (dataArray) {\n          volumeWorker.current.postMessage({\n            dataArray\n          });\n        }\n        animationFrameId.current = requestAnimationFrame(updateVolume);\n      };\n      updateVolume();\n      setIsMonitoring(true);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n      setIsMonitoring(false);\n    }\n  }, [threshold, onVolumeLow]);\n  const stopMonitoring = useCallback(() => {\n    if (animationFrameId.current) {\n      cancelAnimationFrame(animationFrameId.current);\n      animationFrameId.current = null;\n    }\n    if (volumeWorker.current) {\n      volumeWorker.current.terminate();\n      volumeWorker.current = null;\n    }\n    audioContextManager.stopMonitoring();\n    setIsMonitoring(false);\n  }, []);\n  useEffect(() => {\n    return () => {\n      stopMonitoring();\n    };\n  }, [stopMonitoring]);\n  useEffect(() => {\n    return () => {\n      if (volumeWorker.current) {\n        volumeWorker.current.terminate();\n        volumeWorker.current = null;\n      }\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, []);\n  return {\n    volume,\n    isMonitoring,\n    error,\n    startMonitoring,\n    stopMonitoring\n  };\n}\n_s(useAudioMonitor, \"yyb3TkfPjMSetw2jZ2u5KC3qz8A=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","audioContextManager","useAudioMonitor","threshold","onVolumeLow","sampleInterval","_s","volume","setVolume","isMonitoring","setIsMonitoring","error","setError","volumeWorker","animationFrameId","startMonitoring","current","Worker","URL","import","meta","url","type","onmessage","e","data","newVolume","console","updateVolume","dataArray","getVolume","postMessage","requestAnimationFrame","err","message","stopMonitoring","cancelAnimationFrame","terminate"],"sources":["D:/projects/volume-monitor/src/hooks/useAudioMonitor.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { audioContextManager } from '../utils/audioContext';\r\nimport { volumeAnalyzer } from '../utils/volumeAnalyzer';\r\n\r\ninterface UseAudioMonitorOptions {\r\n  threshold?: number;\r\n  onVolumeLow?: (volume: number) => void;\r\n  sampleInterval?: number;\r\n}\r\n\r\nexport function useAudioMonitor({\r\n  threshold = 30,\r\n  onVolumeLow,\r\n  sampleInterval = 100\r\n}: UseAudioMonitorOptions = {}) {\r\n  const [volume, setVolume] = useState<number>(0);\r\n  const [isMonitoring, setIsMonitoring] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const volumeWorker = useRef<Worker | null>(null);\r\n  const animationFrameId = useRef<number | null>(null);\r\n\r\n  const startMonitoring = useCallback(async () => {\r\n    try {\r\n      await audioContextManager.startMonitoring();\r\n      \r\n      // 初始化Web Worker\r\n      if (!volumeWorker.current) {\r\n        volumeWorker.current = new Worker(\r\n          new URL('../workers/volumeWorker.ts', import.meta.url),\r\n          { type: 'module' }\r\n        );\r\n        \r\n        volumeWorker.current.onmessage = (e) => {\r\n          if (e.data.type === 'volume') {\r\n            const { volume: newVolume } = e.data.data;\r\n            setVolume(newVolume);\r\n            \r\n            if (newVolume < threshold && onVolumeLow) {\r\n              onVolumeLow(newVolume);\r\n            }\r\n          } else if (e.data.type === 'error') {\r\n            console.error('Worker error:', e.data.error);\r\n          }\r\n        };\r\n      }\r\n\r\n      const updateVolume = () => {\r\n        if (!volumeWorker.current) return;\r\n        \r\n        const dataArray = audioContextManager.getVolume();\r\n        if (dataArray) {\r\n          volumeWorker.current.postMessage({ dataArray });\r\n        }\r\n        \r\n        animationFrameId.current = requestAnimationFrame(updateVolume);\r\n      };\r\n\r\n      updateVolume();\r\n      setIsMonitoring(true);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setIsMonitoring(false);\r\n    }\r\n  }, [threshold, onVolumeLow]);\r\n\r\n  const stopMonitoring = useCallback(() => {\r\n    if (animationFrameId.current) {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n      animationFrameId.current = null;\r\n    }\r\n\r\n    if (volumeWorker.current) {\r\n      volumeWorker.current.terminate();\r\n      volumeWorker.current = null;\r\n    }\r\n\r\n    audioContextManager.stopMonitoring();\r\n    setIsMonitoring(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      stopMonitoring();\r\n    };\r\n  }, [stopMonitoring]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (volumeWorker.current) {\r\n        volumeWorker.current.terminate();\r\n        volumeWorker.current = null;\r\n      }\r\n      if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    volume,\r\n    isMonitoring,\r\n    error,\r\n    startMonitoring,\r\n    stopMonitoring\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}