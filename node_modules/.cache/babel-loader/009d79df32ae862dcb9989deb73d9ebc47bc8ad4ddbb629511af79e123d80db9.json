{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { audioContextManager } from '../utils/audioContext';\nimport { alertManager } from '../utils/alertManager';\nexport function useAudioMonitor({\n  threshold = 30,\n  lowVolumeDuration = 3000,\n  onVolumeLow,\n  onLowVolumeDurationUpdate,\n  sampleInterval = 50\n} = {}) {\n  _s();\n  const [volume, setVolume] = useState(0);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [error, setError] = useState(null);\n  const animationFrameId = useRef(null);\n  const lastUpdateTime = useRef(0);\n  const lowVolumeStartTime = useRef(null);\n  const previousDuration = useRef(lowVolumeDuration);\n  const previousThreshold = useRef(threshold);\n\n  // 监听配置变更并同步更新计时器\n  useEffect(() => {\n    const settings = alertManager.getSettings();\n    if (settings.lowVolumeDuration !== lowVolumeDuration) {\n      // 同步更新 AlertManager 的配置\n      alertManager.updateConfig({\n        lowVolumeDuration: lowVolumeDuration\n      });\n\n      // 重置计时器\n      const now = Date.now();\n      lowVolumeStartTime.current = now;\n      previousDuration.current = lowVolumeDuration;\n      onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n    }\n  }, [lowVolumeDuration, onLowVolumeDurationUpdate]);\n  const updateVolume = useCallback(() => {\n    const now = Date.now();\n    if (now - lastUpdateTime.current >= sampleInterval) {\n      const currentVolume = audioContextManager.getVolume();\n      setVolume(currentVolume);\n      lastUpdateTime.current = now;\n\n      // 检查配置是否改变\n      const configChanged = previousDuration.current !== lowVolumeDuration || previousThreshold.current !== threshold;\n      if (configChanged) {\n        // 更新配置引用\n        previousDuration.current = lowVolumeDuration;\n        previousThreshold.current = threshold;\n\n        // 重新开始计时\n        lowVolumeStartTime.current = now;\n        onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n\n        // 检查持续时间和音量状态\n        const duration = now - (lowVolumeStartTime.current || now);\n        if (duration >= lowVolumeDuration) {\n          // 持续时间达到配置时长，触发提醒并重置计时\n          onVolumeLow === null || onVolumeLow === void 0 ? void 0 : onVolumeLow();\n          alertManager.trigger('sound');\n          lowVolumeStartTime.current = now;\n        } else if (currentVolume >= threshold) {\n          // 音量达到阈值，只重置计时\n          lowVolumeStartTime.current = null;\n        }\n      } else {\n        // 配置未改变\n        if (currentVolume >= threshold) {\n          // 音量达到阈值，重置计时器\n          if (lowVolumeStartTime.current !== null) {\n            lowVolumeStartTime.current = null;\n            onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n          }\n        } else {\n          // 音量低于阈值，继续计时\n          if (lowVolumeStartTime.current === null) {\n            // 开始新的计时\n            lowVolumeStartTime.current = now;\n            onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n          } else {\n            // 继续计时\n            const duration = now - lowVolumeStartTime.current;\n            if (duration >= lowVolumeDuration) {\n              // 达到配置的持续时间时触发提醒\n              onVolumeLow === null || onVolumeLow === void 0 ? void 0 : onVolumeLow();\n              alertManager.trigger('sound');\n              // 重新开始计时\n              lowVolumeStartTime.current = now;\n              onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n            } else {\n              // 未达到持续时间时，更新显示\n              onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(duration);\n            }\n          }\n        }\n      }\n    }\n    animationFrameId.current = requestAnimationFrame(updateVolume);\n  }, [threshold, lowVolumeDuration, onVolumeLow, sampleInterval, onLowVolumeDurationUpdate]);\n  const startMonitoring = useCallback(async () => {\n    try {\n      await audioContextManager.startMonitoring();\n      lastUpdateTime.current = Date.now();\n      lowVolumeStartTime.current = null;\n      previousDuration.current = lowVolumeDuration;\n      onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n      updateVolume();\n      setIsMonitoring(true);\n      setError(null);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '未知错误';\n      setError(errorMessage);\n      setIsMonitoring(false);\n    }\n  }, [updateVolume, onLowVolumeDurationUpdate, lowVolumeDuration]);\n  const stopMonitoring = useCallback(() => {\n    if (animationFrameId.current) {\n      cancelAnimationFrame(animationFrameId.current);\n      animationFrameId.current = null;\n    }\n    audioContextManager.stopMonitoring();\n    setIsMonitoring(false);\n    lowVolumeStartTime.current = null;\n    onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n  }, [onLowVolumeDurationUpdate]);\n\n  // 组件挂载时自动启动监控\n  useEffect(() => {\n    startMonitoring();\n    return () => {\n      stopMonitoring();\n    };\n  }, []);\n  return {\n    volume,\n    isMonitoring,\n    error,\n    startMonitoring,\n    stopMonitoring\n  };\n}\n_s(useAudioMonitor, \"gE3PJaQ52315JTcJCCw4eMECo8U=\");","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","audioContextManager","alertManager","useAudioMonitor","threshold","lowVolumeDuration","onVolumeLow","onLowVolumeDurationUpdate","sampleInterval","_s","volume","setVolume","isMonitoring","setIsMonitoring","error","setError","animationFrameId","lastUpdateTime","lowVolumeStartTime","previousDuration","previousThreshold","settings","getSettings","updateConfig","now","Date","current","updateVolume","currentVolume","getVolume","configChanged","duration","trigger","requestAnimationFrame","startMonitoring","err","errorMessage","Error","message","stopMonitoring","cancelAnimationFrame"],"sources":["D:/projects/volume-monitor/src/hooks/useAudioMonitor.ts"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\r\nimport { audioContextManager } from '../utils/audioContext';\r\nimport { alertManager } from '../utils/alertManager';\r\n\r\ninterface UseAudioMonitorOptions {\r\n  threshold?: number;\r\n  lowVolumeDuration?: number;\r\n  onVolumeLow?: () => void;\r\n  onLowVolumeDurationUpdate?: (duration: number) => void;\r\n  sampleInterval?: number;\r\n}\r\n\r\nexport function useAudioMonitor({\r\n  threshold = 30,\r\n  lowVolumeDuration = 3000,\r\n  onVolumeLow,\r\n  onLowVolumeDurationUpdate,\r\n  sampleInterval = 50\r\n}: UseAudioMonitorOptions = {}) {\r\n  const [volume, setVolume] = useState<number>(0);\r\n  const [isMonitoring, setIsMonitoring] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const animationFrameId = useRef<number | null>(null);\r\n  const lastUpdateTime = useRef<number>(0);\r\n  const lowVolumeStartTime = useRef<number | null>(null);\r\n  const previousDuration = useRef<number>(lowVolumeDuration);\r\n  const previousThreshold = useRef<number>(threshold);\r\n\r\n  // 监听配置变更并同步更新计时器\r\n  useEffect(() => {\r\n    const settings = alertManager.getSettings();\r\n    if (settings.lowVolumeDuration !== lowVolumeDuration) {\r\n      // 同步更新 AlertManager 的配置\r\n      alertManager.updateConfig({\r\n        lowVolumeDuration: lowVolumeDuration\r\n      });\r\n      \r\n      // 重置计时器\r\n      const now = Date.now();\r\n      lowVolumeStartTime.current = now;\r\n      previousDuration.current = lowVolumeDuration;\r\n      onLowVolumeDurationUpdate?.(0);\r\n    }\r\n  }, [lowVolumeDuration, onLowVolumeDurationUpdate]);\r\n\r\n  const updateVolume = useCallback(() => {\r\n    const now = Date.now();\r\n    if (now - lastUpdateTime.current >= sampleInterval) {\r\n      const currentVolume = audioContextManager.getVolume();\r\n      setVolume(currentVolume);\r\n      lastUpdateTime.current = now;\r\n\r\n      // 检查配置是否改变\r\n      const configChanged = \r\n        previousDuration.current !== lowVolumeDuration ||\r\n        previousThreshold.current !== threshold;\r\n\r\n      if (configChanged) {\r\n        // 更新配置引用\r\n        previousDuration.current = lowVolumeDuration;\r\n        previousThreshold.current = threshold;\r\n        \r\n        // 重新开始计时\r\n        lowVolumeStartTime.current = now;\r\n        onLowVolumeDurationUpdate?.(0);\r\n\r\n        // 检查持续时间和音量状态\r\n        const duration = now - (lowVolumeStartTime.current || now);\r\n        if (duration >= lowVolumeDuration) {\r\n          // 持续时间达到配置时长，触发提醒并重置计时\r\n          onVolumeLow?.();\r\n          alertManager.trigger('sound');\r\n          lowVolumeStartTime.current = now;\r\n        } else if (currentVolume >= threshold) {\r\n          // 音量达到阈值，只重置计时\r\n          lowVolumeStartTime.current = null;\r\n        }\r\n      } else {\r\n        // 配置未改变\r\n        if (currentVolume >= threshold) {\r\n          // 音量达到阈值，重置计时器\r\n          if (lowVolumeStartTime.current !== null) {\r\n            lowVolumeStartTime.current = null;\r\n            onLowVolumeDurationUpdate?.(0);\r\n          }\r\n        } else {\r\n          // 音量低于阈值，继续计时\r\n          if (lowVolumeStartTime.current === null) {\r\n            // 开始新的计时\r\n            lowVolumeStartTime.current = now;\r\n            onLowVolumeDurationUpdate?.(0);\r\n          } else {\r\n            // 继续计时\r\n            const duration = now - lowVolumeStartTime.current;\r\n            \r\n            if (duration >= lowVolumeDuration) {\r\n              // 达到配置的持续时间时触发提醒\r\n              onVolumeLow?.();\r\n              alertManager.trigger('sound');\r\n              // 重新开始计时\r\n              lowVolumeStartTime.current = now;\r\n              onLowVolumeDurationUpdate?.(0);\r\n            } else {\r\n              // 未达到持续时间时，更新显示\r\n              onLowVolumeDurationUpdate?.(duration);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    animationFrameId.current = requestAnimationFrame(updateVolume);\r\n  }, [threshold, lowVolumeDuration, onVolumeLow, sampleInterval, onLowVolumeDurationUpdate]);\r\n\r\n  const startMonitoring = useCallback(async () => {\r\n    try {\r\n      await audioContextManager.startMonitoring();\r\n      lastUpdateTime.current = Date.now();\r\n      lowVolumeStartTime.current = null;\r\n      previousDuration.current = lowVolumeDuration;\r\n      onLowVolumeDurationUpdate?.(0);\r\n      updateVolume();\r\n      setIsMonitoring(true);\r\n      setError(null);\r\n    } catch (err: unknown) {\r\n      const errorMessage = err instanceof Error ? err.message : '未知错误';\r\n      setError(errorMessage);\r\n      setIsMonitoring(false);\r\n    }\r\n  }, [updateVolume, onLowVolumeDurationUpdate, lowVolumeDuration]);\r\n\r\n  const stopMonitoring = useCallback(() => {\r\n    if (animationFrameId.current) {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n      animationFrameId.current = null;\r\n    }\r\n    audioContextManager.stopMonitoring();\r\n    setIsMonitoring(false);\r\n    lowVolumeStartTime.current = null;\r\n    onLowVolumeDurationUpdate?.(0);\r\n  }, [onLowVolumeDurationUpdate]);\r\n\r\n  // 组件挂载时自动启动监控\r\n  useEffect(() => {\r\n    startMonitoring();\r\n    return () => {\r\n      stopMonitoring();\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    volume,\r\n    isMonitoring,\r\n    error,\r\n    startMonitoring,\r\n    stopMonitoring\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}