{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { audioContextManager } from '../utils/audioContext';\nimport { alertManager } from '../utils/alertManager';\nexport function useAudioMonitor({\n  threshold = 30,\n  lowVolumeDuration = 3000,\n  onVolumeLow,\n  onLowVolumeDurationUpdate,\n  sampleInterval = 50\n} = {}) {\n  _s();\n  const [volume, setVolume] = useState(0);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [error, setError] = useState(null);\n  const animationFrameId = useRef(null);\n  const lastUpdateTime = useRef(0);\n  const lowVolumeStartTime = useRef(null);\n  const currentLowVolumeDurationRef = useRef(lowVolumeDuration);\n\n  // 更新持续时间引用\n  useEffect(() => {\n    currentLowVolumeDurationRef.current = lowVolumeDuration;\n  }, [lowVolumeDuration]);\n  const updateVolume = useCallback(() => {\n    const now = Date.now();\n    if (now - lastUpdateTime.current >= sampleInterval) {\n      const currentVolume = audioContextManager.getVolume();\n      setVolume(currentVolume);\n      lastUpdateTime.current = now;\n      if (currentVolume >= threshold) {\n        // 音量达到或超过阈值，重置计时器\n        if (lowVolumeStartTime.current !== null) {\n          lowVolumeStartTime.current = null;\n          onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n        }\n      } else {\n        // 音量低于阈值\n        if (lowVolumeStartTime.current === null) {\n          // 开始新的计时\n          lowVolumeStartTime.current = now;\n          onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n        } else {\n          // 继续计时\n          const duration = now - lowVolumeStartTime.current;\n          if (duration >= currentLowVolumeDurationRef.current) {\n            // 达到配置的持续时间\n            onVolumeLow === null || onVolumeLow === void 0 ? void 0 : onVolumeLow();\n            alertManager.trigger('sound');\n            // 重新开始计时\n            lowVolumeStartTime.current = now;\n            onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n          } else {\n            // 更新持续时间显示\n            onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(duration);\n          }\n        }\n      }\n    }\n    animationFrameId.current = requestAnimationFrame(updateVolume);\n  }, [threshold, onVolumeLow, sampleInterval, onLowVolumeDurationUpdate]);\n\n  // 组件挂载时自动启动监控\n  useEffect(() => {\n    startMonitoring();\n    return () => {\n      stopMonitoring();\n    };\n  }, []);\n  const startMonitoring = useCallback(async () => {\n    try {\n      await audioContextManager.startMonitoring();\n      lastUpdateTime.current = Date.now();\n      updateVolume();\n      setIsMonitoring(true);\n      setError(null);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '未知错误';\n      setError(errorMessage);\n      setIsMonitoring(false);\n    }\n  }, [updateVolume]);\n  const stopMonitoring = useCallback(() => {\n    if (animationFrameId.current) {\n      cancelAnimationFrame(animationFrameId.current);\n      animationFrameId.current = null;\n    }\n    audioContextManager.stopMonitoring();\n    setIsMonitoring(false);\n    lowVolumeStartTime.current = null;\n    onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n  }, [onLowVolumeDurationUpdate]);\n\n  // 当配置改变时重置计时器\n  useEffect(() => {\n    if (lowVolumeStartTime.current !== null) {\n      lowVolumeStartTime.current = Date.now();\n      onLowVolumeDurationUpdate === null || onLowVolumeDurationUpdate === void 0 ? void 0 : onLowVolumeDurationUpdate(0);\n    }\n  }, [threshold, lowVolumeDuration]);\n  return {\n    volume,\n    isMonitoring,\n    error,\n    startMonitoring,\n    stopMonitoring\n  };\n}\n_s(useAudioMonitor, \"OQHFxiWocAn4cBvzph+c8wjtEaM=\");","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","audioContextManager","alertManager","useAudioMonitor","threshold","lowVolumeDuration","onVolumeLow","onLowVolumeDurationUpdate","sampleInterval","_s","volume","setVolume","isMonitoring","setIsMonitoring","error","setError","animationFrameId","lastUpdateTime","lowVolumeStartTime","currentLowVolumeDurationRef","current","updateVolume","now","Date","currentVolume","getVolume","duration","trigger","requestAnimationFrame","startMonitoring","stopMonitoring","err","errorMessage","Error","message","cancelAnimationFrame"],"sources":["D:/projects/volume-monitor/src/hooks/useAudioMonitor.ts"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\r\nimport { audioContextManager } from '../utils/audioContext';\r\nimport { alertManager } from '../utils/alertManager';\r\n\r\ninterface UseAudioMonitorOptions {\r\n  threshold?: number;\r\n  lowVolumeDuration?: number;\r\n  onVolumeLow?: () => void;\r\n  onLowVolumeDurationUpdate?: (duration: number) => void;\r\n  sampleInterval?: number;\r\n}\r\n\r\nexport function useAudioMonitor({\r\n  threshold = 30,\r\n  lowVolumeDuration = 3000,\r\n  onVolumeLow,\r\n  onLowVolumeDurationUpdate,\r\n  sampleInterval = 50\r\n}: UseAudioMonitorOptions = {}) {\r\n  const [volume, setVolume] = useState<number>(0);\r\n  const [isMonitoring, setIsMonitoring] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const animationFrameId = useRef<number | null>(null);\r\n  const lastUpdateTime = useRef<number>(0);\r\n  const lowVolumeStartTime = useRef<number | null>(null);\r\n  const currentLowVolumeDurationRef = useRef<number>(lowVolumeDuration);\r\n\r\n  // 更新持续时间引用\r\n  useEffect(() => {\r\n    currentLowVolumeDurationRef.current = lowVolumeDuration;\r\n  }, [lowVolumeDuration]);\r\n\r\n  const updateVolume = useCallback(() => {\r\n    const now = Date.now();\r\n    if (now - lastUpdateTime.current >= sampleInterval) {\r\n      const currentVolume = audioContextManager.getVolume();\r\n      setVolume(currentVolume);\r\n      lastUpdateTime.current = now;\r\n\r\n      if (currentVolume >= threshold) {\r\n        // 音量达到或超过阈值，重置计时器\r\n        if (lowVolumeStartTime.current !== null) {\r\n          lowVolumeStartTime.current = null;\r\n          onLowVolumeDurationUpdate?.(0);\r\n        }\r\n      } else {\r\n        // 音量低于阈值\r\n        if (lowVolumeStartTime.current === null) {\r\n          // 开始新的计时\r\n          lowVolumeStartTime.current = now;\r\n          onLowVolumeDurationUpdate?.(0);\r\n        } else {\r\n          // 继续计时\r\n          const duration = now - lowVolumeStartTime.current;\r\n          if (duration >= currentLowVolumeDurationRef.current) {\r\n            // 达到配置的持续时间\r\n            onVolumeLow?.();\r\n            alertManager.trigger('sound');\r\n            // 重新开始计时\r\n            lowVolumeStartTime.current = now;\r\n            onLowVolumeDurationUpdate?.(0);\r\n          } else {\r\n            // 更新持续时间显示\r\n            onLowVolumeDurationUpdate?.(duration);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    animationFrameId.current = requestAnimationFrame(updateVolume);\r\n  }, [threshold, onVolumeLow, sampleInterval, onLowVolumeDurationUpdate]);\r\n\r\n  // 组件挂载时自动启动监控\r\n  useEffect(() => {\r\n    startMonitoring();\r\n    return () => {\r\n      stopMonitoring();\r\n    };\r\n  }, []);\r\n\r\n  const startMonitoring = useCallback(async () => {\r\n    try {\r\n      await audioContextManager.startMonitoring();\r\n      lastUpdateTime.current = Date.now();\r\n      updateVolume();\r\n      setIsMonitoring(true);\r\n      setError(null);\r\n    } catch (err: unknown) {\r\n      const errorMessage = err instanceof Error ? err.message : '未知错误';\r\n      setError(errorMessage);\r\n      setIsMonitoring(false);\r\n    }\r\n  }, [updateVolume]);\r\n\r\n  const stopMonitoring = useCallback(() => {\r\n    if (animationFrameId.current) {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n      animationFrameId.current = null;\r\n    }\r\n    audioContextManager.stopMonitoring();\r\n    setIsMonitoring(false);\r\n    lowVolumeStartTime.current = null;\r\n    onLowVolumeDurationUpdate?.(0);\r\n  }, [onLowVolumeDurationUpdate]);\r\n\r\n  // 当配置改变时重置计时器\r\n  useEffect(() => {\r\n    if (lowVolumeStartTime.current !== null) {\r\n      lowVolumeStartTime.current = Date.now();\r\n      onLowVolumeDurationUpdate?.(0);\r\n    }\r\n  }, [threshold, lowVolumeDuration]);\r\n\r\n  return {\r\n    volume,\r\n    isMonitoring,\r\n    error,\r\n    startMonitoring,\r\n    stopMonitoring\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}