{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\volume-monitor\\\\src\\\\components\\\\CalibrationModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n_c = Overlay;\nconst Modal = styled.div`\n  background-color: white;\n  padding: 24px;\n  border-radius: 8px;\n  width: 400px;\n  max-width: 90vw;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n`;\n_c2 = Modal;\nconst Progress = styled.div`\n  width: 100%;\n  height: 4px;\n  background-color: #eee;\n  border-radius: 2px;\n  margin: 16px 0;\n  overflow: hidden;\n\n  &::after {\n    content: '';\n    display: block;\n    width: ${props => props.progress}%;\n    height: 100%;\n    background-color: #2196f3;\n    transition: width 0.1s linear;\n  }\n`;\n_c3 = Progress;\nexport const CalibrationModal = ({\n  isOpen,\n  onClose,\n  onComplete\n}) => {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [status, setStatus] = useState('ready');\n  useEffect(() => {\n    if (isOpen && status === 'ready') {\n      setStatus('calibrating');\n      const startTime = Date.now();\n      const duration = 10000; // 10秒\n\n      const interval = setInterval(() => {\n        const elapsed = Date.now() - startTime;\n        const newProgress = elapsed / duration * 100;\n        if (newProgress >= 100) {\n          clearInterval(interval);\n          setStatus('complete');\n          setProgress(100);\n          // 这里调用 settingsManager.calibrate() 获取新的阈值\n          settingsManager.calibrate().then(onComplete);\n        } else {\n          setProgress(newProgress);\n        }\n      }, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isOpen, status, onComplete]);\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(Overlay, {\n    onClick: status === 'complete' ? onClose : undefined,\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u97F3\\u91CF\\u6821\\u51C6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [status === 'ready' && '准备开始校准...', status === 'calibrating' && '请正常说话，系统正在校准音量...', status === 'complete' && '校准完成！']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Progress, {\n        progress: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u5269\\u4F59\\u65F6\\u95F4: \", Math.ceil((10000 - progress * 100) / 1000), \"\\u79D2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(CalibrationModal, \"jOIswBRHg6NhqQNu9J7J0FIhy3A=\");\n_c4 = CalibrationModal;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Overlay\");\n$RefreshReg$(_c2, \"Modal\");\n$RefreshReg$(_c3, \"Progress\");\n$RefreshReg$(_c4, \"CalibrationModal\");","map":{"version":3,"names":["React","useState","useEffect","styled","jsxDEV","_jsxDEV","Overlay","div","_c","Modal","_c2","Progress","props","progress","_c3","CalibrationModal","isOpen","onClose","onComplete","_s","setProgress","status","setStatus","startTime","Date","now","duration","interval","setInterval","elapsed","newProgress","clearInterval","settingsManager","calibrate","then","onClick","undefined","children","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","Math","ceil","_c4","$RefreshReg$"],"sources":["D:/projects/volume-monitor/src/components/CalibrationModal.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CalibrationModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onComplete: (threshold: number) => void;\r\n}\r\n\r\nconst Overlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst Modal = styled.div`\r\n  background-color: white;\r\n  padding: 24px;\r\n  border-radius: 8px;\r\n  width: 400px;\r\n  max-width: 90vw;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n`;\r\n\r\nconst Progress = styled.div<{ progress: number }>`\r\n  width: 100%;\r\n  height: 4px;\r\n  background-color: #eee;\r\n  border-radius: 2px;\r\n  margin: 16px 0;\r\n  overflow: hidden;\r\n\r\n  &::after {\r\n    content: '';\r\n    display: block;\r\n    width: ${props => props.progress}%;\r\n    height: 100%;\r\n    background-color: #2196f3;\r\n    transition: width 0.1s linear;\r\n  }\r\n`;\r\n\r\nexport const CalibrationModal: React.FC<CalibrationModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onComplete\r\n}) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [status, setStatus] = useState<'ready' | 'calibrating' | 'complete'>('ready');\r\n\r\n  useEffect(() => {\r\n    if (isOpen && status === 'ready') {\r\n      setStatus('calibrating');\r\n      const startTime = Date.now();\r\n      const duration = 10000; // 10秒\r\n\r\n      const interval = setInterval(() => {\r\n        const elapsed = Date.now() - startTime;\r\n        const newProgress = (elapsed / duration) * 100;\r\n\r\n        if (newProgress >= 100) {\r\n          clearInterval(interval);\r\n          setStatus('complete');\r\n          setProgress(100);\r\n          // 这里调用 settingsManager.calibrate() 获取新的阈值\r\n          settingsManager.calibrate().then(onComplete);\r\n        } else {\r\n          setProgress(newProgress);\r\n        }\r\n      }, 100);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isOpen, status, onComplete]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <Overlay onClick={status === 'complete' ? onClose : undefined}>\r\n      <Modal onClick={e => e.stopPropagation()}>\r\n        <h3>音量校准</h3>\r\n        <p>\r\n          {status === 'ready' && '准备开始校准...'}\r\n          {status === 'calibrating' && '请正常说话，系统正在校准音量...'}\r\n          {status === 'complete' && '校准完成！'}\r\n        </p>\r\n        <Progress progress={progress} />\r\n        <p>剩余时间: {Math.ceil((10000 - progress * 100) / 1000)}秒</p>\r\n      </Modal>\r\n    </Overlay>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}