{"ast":null,"code":"export class AudioContextManager {\n  constructor() {\n    this.audioContext = null;\n    this.analyserNode = null;\n    this.sourceNode = null;\n    this.mediaStream = null;\n    this.dataArray = null;\n  }\n  async startMonitoring() {\n    try {\n      if (!this.audioContext) {\n        this.audioContext = new AudioContext();\n      }\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      this.mediaStream = stream;\n      this.sourceNode = this.audioContext.createMediaStreamSource(stream);\n      this.analyserNode = this.audioContext.createAnalyser();\n      this.analyserNode.fftSize = 2048;\n      this.analyserNode.smoothingTimeConstant = 0.8;\n      this.sourceNode.connect(this.analyserNode);\n      this.dataArray = new Float32Array(this.analyserNode.frequencyBinCount);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error('Failed to start audio monitoring: ' + errorMessage);\n    }\n  }\n  getVolume() {\n    if (!this.analyserNode || !this.dataArray) {\n      return 0;\n    }\n\n    // 获取时域数据\n    this.analyserNode.getFloatTimeDomainData(this.dataArray);\n\n    // 计算音量\n    let sum = 0;\n    for (let i = 0; i < this.dataArray.length; i++) {\n      sum += this.dataArray[i] * this.dataArray[i];\n    }\n    const rms = Math.sqrt(sum / this.dataArray.length);\n\n    // 转换为分贝值\n    const db = 20 * Math.log10(rms);\n\n    // 将分贝值转换为0-100的百分比\n    // 通常人声在-60dB到0dB之间\n    const percentage = Math.max(0, Math.min(100, (db + 60) * 1.67));\n    return percentage;\n  }\n  stopMonitoring() {\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n    if (this.analyserNode) {\n      this.analyserNode.disconnect();\n      this.analyserNode = null;\n    }\n  }\n  resume() {\n    var _this$audioContext;\n    if (((_this$audioContext = this.audioContext) === null || _this$audioContext === void 0 ? void 0 : _this$audioContext.state) === 'suspended') {\n      this.audioContext.resume();\n    }\n  }\n  suspend() {\n    var _this$audioContext2;\n    if (((_this$audioContext2 = this.audioContext) === null || _this$audioContext2 === void 0 ? void 0 : _this$audioContext2.state) === 'running') {\n      this.audioContext.suspend();\n    }\n  }\n}\nexport const audioContextManager = new AudioContextManager();","map":{"version":3,"names":["AudioContextManager","constructor","audioContext","analyserNode","sourceNode","mediaStream","dataArray","startMonitoring","AudioContext","stream","navigator","mediaDevices","getUserMedia","audio","createMediaStreamSource","createAnalyser","fftSize","smoothingTimeConstant","connect","Float32Array","frequencyBinCount","error","errorMessage","Error","message","getVolume","getFloatTimeDomainData","sum","i","length","rms","Math","sqrt","db","log10","percentage","max","min","stopMonitoring","getTracks","forEach","track","stop","disconnect","resume","_this$audioContext","state","suspend","_this$audioContext2","audioContextManager"],"sources":["D:/projects/volume-monitor/src/utils/audioContext.ts"],"sourcesContent":["export class AudioContextManager {\r\n  private audioContext: AudioContext | null = null;\r\n  private analyserNode: AnalyserNode | null = null;\r\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\r\n  private mediaStream: MediaStream | null = null;\r\n  private dataArray: Float32Array | null = null;\r\n\r\n  public async startMonitoring(): Promise<void> {\r\n    try {\r\n      if (!this.audioContext) {\r\n        this.audioContext = new AudioContext();\r\n      }\r\n\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      this.mediaStream = stream;\r\n\r\n      this.sourceNode = this.audioContext.createMediaStreamSource(stream);\r\n      this.analyserNode = this.audioContext.createAnalyser();\r\n      \r\n      this.analyserNode.fftSize = 2048;\r\n      this.analyserNode.smoothingTimeConstant = 0.8;\r\n      \r\n      this.sourceNode.connect(this.analyserNode);\r\n      this.dataArray = new Float32Array(this.analyserNode.frequencyBinCount);\r\n    } catch (error: unknown) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n      throw new Error('Failed to start audio monitoring: ' + errorMessage);\r\n    }\r\n  }\r\n\r\n  public getVolume(): number {\r\n    if (!this.analyserNode || !this.dataArray) {\r\n      return 0;\r\n    }\r\n\r\n    // 获取时域数据\r\n    this.analyserNode.getFloatTimeDomainData(this.dataArray);\r\n\r\n    // 计算音量\r\n    let sum = 0;\r\n    for (let i = 0; i < this.dataArray.length; i++) {\r\n      sum += this.dataArray[i] * this.dataArray[i];\r\n    }\r\n    const rms = Math.sqrt(sum / this.dataArray.length);\r\n    \r\n    // 转换为分贝值\r\n    const db = 20 * Math.log10(rms);\r\n    \r\n    // 将分贝值转换为0-100的百分比\r\n    // 通常人声在-60dB到0dB之间\r\n    const percentage = Math.max(0, Math.min(100, (db + 60) * 1.67));\r\n    \r\n    return percentage;\r\n  }\r\n\r\n  public stopMonitoring(): void {\r\n    if (this.mediaStream) {\r\n      this.mediaStream.getTracks().forEach(track => track.stop());\r\n      this.mediaStream = null;\r\n    }\r\n\r\n    if (this.sourceNode) {\r\n      this.sourceNode.disconnect();\r\n      this.sourceNode = null;\r\n    }\r\n\r\n    if (this.analyserNode) {\r\n      this.analyserNode.disconnect();\r\n      this.analyserNode = null;\r\n    }\r\n  }\r\n\r\n  public resume(): void {\r\n    if (this.audioContext?.state === 'suspended') {\r\n      this.audioContext.resume();\r\n    }\r\n  }\r\n\r\n  public suspend(): void {\r\n    if (this.audioContext?.state === 'running') {\r\n      this.audioContext.suspend();\r\n    }\r\n  }\r\n}\r\n\r\nexport const audioContextManager = new AudioContextManager(); "],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,CAAC;EAAAC,YAAA;IAAA,KACvBC,YAAY,GAAwB,IAAI;IAAA,KACxCC,YAAY,GAAwB,IAAI;IAAA,KACxCC,UAAU,GAAsC,IAAI;IAAA,KACpDC,WAAW,GAAuB,IAAI;IAAA,KACtCC,SAAS,GAAwB,IAAI;EAAA;EAE7C,MAAaC,eAAeA,CAAA,EAAkB;IAC5C,IAAI;MACF,IAAI,CAAC,IAAI,CAACL,YAAY,EAAE;QACtB,IAAI,CAACA,YAAY,GAAG,IAAIM,YAAY,CAAC,CAAC;MACxC;MAEA,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzE,IAAI,CAACR,WAAW,GAAGI,MAAM;MAEzB,IAAI,CAACL,UAAU,GAAG,IAAI,CAACF,YAAY,CAACY,uBAAuB,CAACL,MAAM,CAAC;MACnE,IAAI,CAACN,YAAY,GAAG,IAAI,CAACD,YAAY,CAACa,cAAc,CAAC,CAAC;MAEtD,IAAI,CAACZ,YAAY,CAACa,OAAO,GAAG,IAAI;MAChC,IAAI,CAACb,YAAY,CAACc,qBAAqB,GAAG,GAAG;MAE7C,IAAI,CAACb,UAAU,CAACc,OAAO,CAAC,IAAI,CAACf,YAAY,CAAC;MAC1C,IAAI,CAACG,SAAS,GAAG,IAAIa,YAAY,CAAC,IAAI,CAAChB,YAAY,CAACiB,iBAAiB,CAAC;IACxE,CAAC,CAAC,OAAOC,KAAc,EAAE;MACvB,MAAMC,YAAY,GAAGD,KAAK,YAAYE,KAAK,GAAGF,KAAK,CAACG,OAAO,GAAG,eAAe;MAC7E,MAAM,IAAID,KAAK,CAAC,oCAAoC,GAAGD,YAAY,CAAC;IACtE;EACF;EAEOG,SAASA,CAAA,EAAW;IACzB,IAAI,CAAC,IAAI,CAACtB,YAAY,IAAI,CAAC,IAAI,CAACG,SAAS,EAAE;MACzC,OAAO,CAAC;IACV;;IAEA;IACA,IAAI,CAACH,YAAY,CAACuB,sBAAsB,CAAC,IAAI,CAACpB,SAAS,CAAC;;IAExD;IACA,IAAIqB,GAAG,GAAG,CAAC;IACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACtB,SAAS,CAACuB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC9CD,GAAG,IAAI,IAAI,CAACrB,SAAS,CAACsB,CAAC,CAAC,GAAG,IAAI,CAACtB,SAAS,CAACsB,CAAC,CAAC;IAC9C;IACA,MAAME,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACL,GAAG,GAAG,IAAI,CAACrB,SAAS,CAACuB,MAAM,CAAC;;IAElD;IACA,MAAMI,EAAE,GAAG,EAAE,GAAGF,IAAI,CAACG,KAAK,CAACJ,GAAG,CAAC;;IAE/B;IACA;IACA,MAAMK,UAAU,GAAGJ,IAAI,CAACK,GAAG,CAAC,CAAC,EAAEL,IAAI,CAACM,GAAG,CAAC,GAAG,EAAE,CAACJ,EAAE,GAAG,EAAE,IAAI,IAAI,CAAC,CAAC;IAE/D,OAAOE,UAAU;EACnB;EAEOG,cAAcA,CAAA,EAAS;IAC5B,IAAI,IAAI,CAACjC,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACkC,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MAC3D,IAAI,CAACrC,WAAW,GAAG,IAAI;IACzB;IAEA,IAAI,IAAI,CAACD,UAAU,EAAE;MACnB,IAAI,CAACA,UAAU,CAACuC,UAAU,CAAC,CAAC;MAC5B,IAAI,CAACvC,UAAU,GAAG,IAAI;IACxB;IAEA,IAAI,IAAI,CAACD,YAAY,EAAE;MACrB,IAAI,CAACA,YAAY,CAACwC,UAAU,CAAC,CAAC;MAC9B,IAAI,CAACxC,YAAY,GAAG,IAAI;IAC1B;EACF;EAEOyC,MAAMA,CAAA,EAAS;IAAA,IAAAC,kBAAA;IACpB,IAAI,EAAAA,kBAAA,OAAI,CAAC3C,YAAY,cAAA2C,kBAAA,uBAAjBA,kBAAA,CAAmBC,KAAK,MAAK,WAAW,EAAE;MAC5C,IAAI,CAAC5C,YAAY,CAAC0C,MAAM,CAAC,CAAC;IAC5B;EACF;EAEOG,OAAOA,CAAA,EAAS;IAAA,IAAAC,mBAAA;IACrB,IAAI,EAAAA,mBAAA,OAAI,CAAC9C,YAAY,cAAA8C,mBAAA,uBAAjBA,mBAAA,CAAmBF,KAAK,MAAK,SAAS,EAAE;MAC1C,IAAI,CAAC5C,YAAY,CAAC6C,OAAO,CAAC,CAAC;IAC7B;EACF;AACF;AAEA,OAAO,MAAME,mBAAmB,GAAG,IAAIjD,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}