{"ast":null,"code":"export class AudioContextManager {\n  constructor() {\n    this.audioContext = null;\n    this.mediaStream = null;\n    this.sourceNode = null;\n    this.analyserNode = null;\n    this.dataArray = null;\n    this.initializeContext();\n  }\n  async initializeContext() {\n    try {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    } catch (error) {\n      throw new Error('Web Audio API is not supported in this browser');\n    }\n  }\n  async startMonitoring() {\n    try {\n      // 请求麦克风权限\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        },\n        video: false\n      });\n\n      // 创建音频源节点\n      this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);\n\n      // 创建分析器节点\n      this.analyserNode = this.audioContext.createAnalyser();\n      this.analyserNode.fftSize = 1024;\n      this.analyserNode.smoothingTimeConstant = 0.3;\n\n      // 连接节点\n      this.sourceNode.connect(this.analyserNode);\n\n      // 创建数据数组\n      this.dataArray = new Float32Array(this.analyserNode.frequencyBinCount);\n    } catch (error) {\n      throw new Error('Failed to start audio monitoring: ' + error.message);\n    }\n  }\n  getVolume() {\n    if (!this.analyserNode || !this.dataArray) {\n      return 0;\n    }\n\n    // 获取时域数据\n    this.analyserNode.getFloatTimeDomainData(this.dataArray);\n\n    // 计算音量\n    let sum = 0;\n    for (let i = 0; i < this.dataArray.length; i++) {\n      sum += this.dataArray[i] * this.dataArray[i];\n    }\n    const rms = Math.sqrt(sum / this.dataArray.length);\n\n    // 转换为分贝值\n    const db = 20 * Math.log10(rms);\n\n    // 将分贝值转换为0-100的百分比\n    // 通常人声在-60dB到0dB之间\n    const percentage = Math.max(0, Math.min(100, (db + 60) * 1.67));\n    return percentage;\n  }\n  stopMonitoring() {\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n    if (this.analyserNode) {\n      this.analyserNode.disconnect();\n      this.analyserNode = null;\n    }\n  }\n  resume() {\n    var _this$audioContext;\n    if (((_this$audioContext = this.audioContext) === null || _this$audioContext === void 0 ? void 0 : _this$audioContext.state) === 'suspended') {\n      this.audioContext.resume();\n    }\n  }\n  suspend() {\n    var _this$audioContext2;\n    if (((_this$audioContext2 = this.audioContext) === null || _this$audioContext2 === void 0 ? void 0 : _this$audioContext2.state) === 'running') {\n      this.audioContext.suspend();\n    }\n  }\n}\nexport const audioContextManager = new AudioContextManager();","map":{"version":3,"names":["AudioContextManager","constructor","audioContext","mediaStream","sourceNode","analyserNode","dataArray","initializeContext","window","AudioContext","webkitAudioContext","error","Error","startMonitoring","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","video","createMediaStreamSource","createAnalyser","fftSize","smoothingTimeConstant","connect","Float32Array","frequencyBinCount","message","getVolume","getFloatTimeDomainData","sum","i","length","rms","Math","sqrt","db","log10","percentage","max","min","stopMonitoring","getTracks","forEach","track","stop","disconnect","resume","_this$audioContext","state","suspend","_this$audioContext2","audioContextManager"],"sources":["D:/projects/volume-monitor/src/utils/audioContext.ts"],"sourcesContent":["export class AudioContextManager {\r\n  private audioContext: AudioContext | null = null;\r\n  private mediaStream: MediaStream | null = null;\r\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\r\n  private analyserNode: AnalyserNode | null = null;\r\n  private dataArray: Float32Array | null = null;\r\n\r\n  constructor() {\r\n    this.initializeContext();\r\n  }\r\n\r\n  private async initializeContext() {\r\n    try {\r\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n    } catch (error) {\r\n      throw new Error('Web Audio API is not supported in this browser');\r\n    }\r\n  }\r\n\r\n  public async startMonitoring(): Promise<void> {\r\n    try {\r\n      // 请求麦克风权限\r\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({\r\n        audio: {\r\n          echoCancellation: true,\r\n          noiseSuppression: true,\r\n          autoGainControl: true,\r\n        },\r\n        video: false\r\n      });\r\n\r\n      // 创建音频源节点\r\n      this.sourceNode = this.audioContext!.createMediaStreamSource(this.mediaStream);\r\n      \r\n      // 创建分析器节点\r\n      this.analyserNode = this.audioContext!.createAnalyser();\r\n      this.analyserNode.fftSize = 1024;\r\n      this.analyserNode.smoothingTimeConstant = 0.3;\r\n\r\n      // 连接节点\r\n      this.sourceNode.connect(this.analyserNode);\r\n      \r\n      // 创建数据数组\r\n      this.dataArray = new Float32Array(this.analyserNode.frequencyBinCount);\r\n    } catch (error) {\r\n      throw new Error('Failed to start audio monitoring: ' + error.message);\r\n    }\r\n  }\r\n\r\n  public getVolume(): number {\r\n    if (!this.analyserNode || !this.dataArray) {\r\n      return 0;\r\n    }\r\n\r\n    // 获取时域数据\r\n    this.analyserNode.getFloatTimeDomainData(this.dataArray);\r\n\r\n    // 计算音量\r\n    let sum = 0;\r\n    for (let i = 0; i < this.dataArray.length; i++) {\r\n      sum += this.dataArray[i] * this.dataArray[i];\r\n    }\r\n    const rms = Math.sqrt(sum / this.dataArray.length);\r\n    \r\n    // 转换为分贝值\r\n    const db = 20 * Math.log10(rms);\r\n    \r\n    // 将分贝值转换为0-100的百分比\r\n    // 通常人声在-60dB到0dB之间\r\n    const percentage = Math.max(0, Math.min(100, (db + 60) * 1.67));\r\n    \r\n    return percentage;\r\n  }\r\n\r\n  public stopMonitoring(): void {\r\n    if (this.mediaStream) {\r\n      this.mediaStream.getTracks().forEach(track => track.stop());\r\n      this.mediaStream = null;\r\n    }\r\n\r\n    if (this.sourceNode) {\r\n      this.sourceNode.disconnect();\r\n      this.sourceNode = null;\r\n    }\r\n\r\n    if (this.analyserNode) {\r\n      this.analyserNode.disconnect();\r\n      this.analyserNode = null;\r\n    }\r\n  }\r\n\r\n  public resume(): void {\r\n    if (this.audioContext?.state === 'suspended') {\r\n      this.audioContext.resume();\r\n    }\r\n  }\r\n\r\n  public suspend(): void {\r\n    if (this.audioContext?.state === 'running') {\r\n      this.audioContext.suspend();\r\n    }\r\n  }\r\n}\r\n\r\nexport const audioContextManager = new AudioContextManager(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}