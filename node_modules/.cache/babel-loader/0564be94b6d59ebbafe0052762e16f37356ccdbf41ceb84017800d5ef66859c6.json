{"ast":null,"code":"class AlertManager {\n  constructor() {\n    this.settings = void 0;\n    this.audioContext = null;\n    this.oscillator = null;\n    this.gainNode = null;\n    this.settings = {\n      textAlerts: true,\n      soundAlerts: true,\n      compactMode: false,\n      alertInterval: 3000,\n      threshold: 30,\n      alertVolume: 0.5,\n      textAlertEnabled: true,\n      soundAlertEnabled: true,\n      isCompact: false,\n      lowVolumeDuration: 3000\n    };\n  }\n  updateConfig(settings) {\n    this.settings = {\n      ...this.settings,\n      ...settings\n    };\n  }\n  async initAudio() {\n    if (!this.audioContext) {\n      this.audioContext = new AudioContext();\n      this.oscillator = this.audioContext.createOscillator();\n      this.gainNode = this.audioContext.createGain();\n      this.oscillator.connect(this.gainNode);\n      this.gainNode.connect(this.audioContext.destination);\n      this.oscillator.type = 'sine';\n      this.oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime);\n      this.gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n      this.oscillator.start();\n    }\n  }\n  async playSound() {\n    if (!this.settings.soundAlerts) return;\n    try {\n      await this.initAudio();\n      if (this.gainNode && this.audioContext) {\n        const now = this.audioContext.currentTime;\n        // 设置音量\n        this.gainNode.gain.setValueAtTime(0, now);\n        this.gainNode.gain.linearRampToValueAtTime(this.settings.alertVolume, now + 0.01);\n        this.gainNode.gain.linearRampToValueAtTime(0, now + 0.5);\n      }\n    } catch (error) {\n      console.error('Failed to play alert sound:', error);\n    }\n  }\n  trigger(type) {\n    switch (type) {\n      case 'sound':\n      case 'low-volume':\n      case 'all':\n        this.playSound();\n        break;\n    }\n  }\n  dispose() {\n    if (this.oscillator) {\n      this.oscillator.stop();\n      this.oscillator.disconnect();\n    }\n    if (this.gainNode) {\n      this.gainNode.disconnect();\n    }\n    if (this.audioContext) {\n      this.audioContext.close();\n    }\n    this.oscillator = null;\n    this.gainNode = null;\n    this.audioContext = null;\n  }\n}\nexport const alertManager = new AlertManager();","map":{"version":3,"names":["AlertManager","constructor","settings","audioContext","oscillator","gainNode","textAlerts","soundAlerts","compactMode","alertInterval","threshold","alertVolume","textAlertEnabled","soundAlertEnabled","isCompact","lowVolumeDuration","updateConfig","initAudio","AudioContext","createOscillator","createGain","connect","destination","type","frequency","setValueAtTime","currentTime","gain","start","playSound","now","linearRampToValueAtTime","error","console","trigger","dispose","stop","disconnect","close","alertManager"],"sources":["D:/projects/volume-monitor/src/utils/alertManager.ts"],"sourcesContent":["import { Settings } from '../types';\r\n\r\nclass AlertManager {\r\n  private settings: Settings;\r\n  private audioContext: AudioContext | null = null;\r\n  private oscillator: OscillatorNode | null = null;\r\n  private gainNode: GainNode | null = null;\r\n\r\n  constructor() {\r\n    this.settings = {\r\n      textAlerts: true,\r\n      soundAlerts: true,\r\n      compactMode: false,\r\n      alertInterval: 3000,\r\n      threshold: 30,\r\n      alertVolume: 0.5,\r\n      textAlertEnabled: true,\r\n      soundAlertEnabled: true,\r\n      isCompact: false,\r\n      lowVolumeDuration: 3000\r\n    };\r\n  }\r\n\r\n  updateConfig(settings: Partial<Settings>) {\r\n    this.settings = { ...this.settings, ...settings };\r\n  }\r\n\r\n  private async initAudio() {\r\n    if (!this.audioContext) {\r\n      this.audioContext = new AudioContext();\r\n      this.oscillator = this.audioContext.createOscillator();\r\n      this.gainNode = this.audioContext.createGain();\r\n      \r\n      this.oscillator.connect(this.gainNode);\r\n      this.gainNode.connect(this.audioContext.destination);\r\n      \r\n      this.oscillator.type = 'sine';\r\n      this.oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime);\r\n      this.gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\r\n      \r\n      this.oscillator.start();\r\n    }\r\n  }\r\n\r\n  private async playSound() {\r\n    if (!this.settings.soundAlerts) return;\r\n\r\n    try {\r\n      await this.initAudio();\r\n      if (this.gainNode && this.audioContext) {\r\n        const now = this.audioContext.currentTime;\r\n        // 设置音量\r\n        this.gainNode.gain.setValueAtTime(0, now);\r\n        this.gainNode.gain.linearRampToValueAtTime(this.settings.alertVolume, now + 0.01);\r\n        this.gainNode.gain.linearRampToValueAtTime(0, now + 0.5);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to play alert sound:', error);\r\n    }\r\n  }\r\n\r\n  trigger(type: 'sound' | 'text' | 'visual' | 'all' | 'low-volume') {\r\n    switch (type) {\r\n      case 'sound':\r\n      case 'low-volume':\r\n      case 'all':\r\n        this.playSound();\r\n        break;\r\n    }\r\n  }\r\n\r\n  dispose() {\r\n    if (this.oscillator) {\r\n      this.oscillator.stop();\r\n      this.oscillator.disconnect();\r\n    }\r\n    if (this.gainNode) {\r\n      this.gainNode.disconnect();\r\n    }\r\n    if (this.audioContext) {\r\n      this.audioContext.close();\r\n    }\r\n    this.oscillator = null;\r\n    this.gainNode = null;\r\n    this.audioContext = null;\r\n  }\r\n}\r\n\r\nexport const alertManager = new AlertManager(); "],"mappings":"AAEA,MAAMA,YAAY,CAAC;EAMjBC,WAAWA,CAAA,EAAG;IAAA,KALNC,QAAQ;IAAA,KACRC,YAAY,GAAwB,IAAI;IAAA,KACxCC,UAAU,GAA0B,IAAI;IAAA,KACxCC,QAAQ,GAAoB,IAAI;IAGtC,IAAI,CAACH,QAAQ,GAAG;MACdI,UAAU,EAAE,IAAI;MAChBC,WAAW,EAAE,IAAI;MACjBC,WAAW,EAAE,KAAK;MAClBC,aAAa,EAAE,IAAI;MACnBC,SAAS,EAAE,EAAE;MACbC,WAAW,EAAE,GAAG;MAChBC,gBAAgB,EAAE,IAAI;MACtBC,iBAAiB,EAAE,IAAI;MACvBC,SAAS,EAAE,KAAK;MAChBC,iBAAiB,EAAE;IACrB,CAAC;EACH;EAEAC,YAAYA,CAACd,QAA2B,EAAE;IACxC,IAAI,CAACA,QAAQ,GAAG;MAAE,GAAG,IAAI,CAACA,QAAQ;MAAE,GAAGA;IAAS,CAAC;EACnD;EAEA,MAAce,SAASA,CAAA,EAAG;IACxB,IAAI,CAAC,IAAI,CAACd,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,GAAG,IAAIe,YAAY,CAAC,CAAC;MACtC,IAAI,CAACd,UAAU,GAAG,IAAI,CAACD,YAAY,CAACgB,gBAAgB,CAAC,CAAC;MACtD,IAAI,CAACd,QAAQ,GAAG,IAAI,CAACF,YAAY,CAACiB,UAAU,CAAC,CAAC;MAE9C,IAAI,CAAChB,UAAU,CAACiB,OAAO,CAAC,IAAI,CAAChB,QAAQ,CAAC;MACtC,IAAI,CAACA,QAAQ,CAACgB,OAAO,CAAC,IAAI,CAAClB,YAAY,CAACmB,WAAW,CAAC;MAEpD,IAAI,CAAClB,UAAU,CAACmB,IAAI,GAAG,MAAM;MAC7B,IAAI,CAACnB,UAAU,CAACoB,SAAS,CAACC,cAAc,CAAC,GAAG,EAAE,IAAI,CAACtB,YAAY,CAACuB,WAAW,CAAC;MAC5E,IAAI,CAACrB,QAAQ,CAACsB,IAAI,CAACF,cAAc,CAAC,CAAC,EAAE,IAAI,CAACtB,YAAY,CAACuB,WAAW,CAAC;MAEnE,IAAI,CAACtB,UAAU,CAACwB,KAAK,CAAC,CAAC;IACzB;EACF;EAEA,MAAcC,SAASA,CAAA,EAAG;IACxB,IAAI,CAAC,IAAI,CAAC3B,QAAQ,CAACK,WAAW,EAAE;IAEhC,IAAI;MACF,MAAM,IAAI,CAACU,SAAS,CAAC,CAAC;MACtB,IAAI,IAAI,CAACZ,QAAQ,IAAI,IAAI,CAACF,YAAY,EAAE;QACtC,MAAM2B,GAAG,GAAG,IAAI,CAAC3B,YAAY,CAACuB,WAAW;QACzC;QACA,IAAI,CAACrB,QAAQ,CAACsB,IAAI,CAACF,cAAc,CAAC,CAAC,EAAEK,GAAG,CAAC;QACzC,IAAI,CAACzB,QAAQ,CAACsB,IAAI,CAACI,uBAAuB,CAAC,IAAI,CAAC7B,QAAQ,CAACS,WAAW,EAAEmB,GAAG,GAAG,IAAI,CAAC;QACjF,IAAI,CAACzB,QAAQ,CAACsB,IAAI,CAACI,uBAAuB,CAAC,CAAC,EAAED,GAAG,GAAG,GAAG,CAAC;MAC1D;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF;EAEAE,OAAOA,CAACX,IAAwD,EAAE;IAChE,QAAQA,IAAI;MACV,KAAK,OAAO;MACZ,KAAK,YAAY;MACjB,KAAK,KAAK;QACR,IAAI,CAACM,SAAS,CAAC,CAAC;QAChB;IACJ;EACF;EAEAM,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAAC/B,UAAU,EAAE;MACnB,IAAI,CAACA,UAAU,CAACgC,IAAI,CAAC,CAAC;MACtB,IAAI,CAAChC,UAAU,CAACiC,UAAU,CAAC,CAAC;IAC9B;IACA,IAAI,IAAI,CAAChC,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,CAACgC,UAAU,CAAC,CAAC;IAC5B;IACA,IAAI,IAAI,CAAClC,YAAY,EAAE;MACrB,IAAI,CAACA,YAAY,CAACmC,KAAK,CAAC,CAAC;IAC3B;IACA,IAAI,CAAClC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACF,YAAY,GAAG,IAAI;EAC1B;AACF;AAEA,OAAO,MAAMoC,YAAY,GAAG,IAAIvC,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}