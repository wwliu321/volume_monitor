{"ast":null,"code":"import { audioContextManager } from './audioContext';\nconst DEFAULT_SETTINGS = {\n  textAlerts: true,\n  soundAlerts: true,\n  compactMode: false,\n  alertInterval: 15000,\n  threshold: 30,\n  alertVolume: 0.5,\n  textAlertEnabled: true,\n  soundAlertEnabled: true,\n  isCompact: false,\n  lowVolumeDuration: 3000\n};\nclass SettingsManager {\n  constructor() {\n    this.settings = void 0;\n    const savedSettings = localStorage.getItem('volumeMonitorSettings');\n    this.settings = savedSettings ? {\n      ...DEFAULT_SETTINGS,\n      ...JSON.parse(savedSettings)\n    } : DEFAULT_SETTINGS;\n  }\n  getSettings() {\n    return {\n      ...this.settings\n    };\n  }\n  updateSettings(newSettings) {\n    this.settings = {\n      ...this.settings,\n      ...newSettings\n    };\n    localStorage.setItem('volumeMonitorSettings', JSON.stringify(this.settings));\n  }\n  async calibrate(durationMs = 10000) {\n    const samples = [];\n    const startTime = Date.now();\n    return new Promise(resolve => {\n      const interval = setInterval(() => {\n        const currentVolume = audioContextManager.getVolume();\n        samples.push(currentVolume);\n        if (Date.now() - startTime >= durationMs) {\n          clearInterval(interval);\n          const average = samples.reduce((a, b) => a + b, 0) / samples.length;\n          const threshold = Math.round(average * 0.6);\n          this.updateSettings({\n            threshold\n          });\n          resolve(threshold);\n        }\n      }, 100);\n    });\n  }\n  resetToDefaults() {\n    this.settings = {\n      ...DEFAULT_SETTINGS\n    };\n    localStorage.removeItem('volumeMonitorSettings');\n  }\n}\nexport const settingsManager = new SettingsManager();","map":{"version":3,"names":["audioContextManager","DEFAULT_SETTINGS","textAlerts","soundAlerts","compactMode","alertInterval","threshold","alertVolume","textAlertEnabled","soundAlertEnabled","isCompact","lowVolumeDuration","SettingsManager","constructor","settings","savedSettings","localStorage","getItem","JSON","parse","getSettings","updateSettings","newSettings","setItem","stringify","calibrate","durationMs","samples","startTime","Date","now","Promise","resolve","interval","setInterval","currentVolume","getVolume","push","clearInterval","average","reduce","a","b","length","Math","round","resetToDefaults","removeItem","settingsManager"],"sources":["D:/projects/volume-monitor/src/utils/settingsManager.ts"],"sourcesContent":["import type { Settings } from '../types';\r\nimport { audioContextManager } from './audioContext';\r\n\r\nconst DEFAULT_SETTINGS: Settings = {\r\n  textAlerts: true,\r\n  soundAlerts: true,\r\n  compactMode: false,\r\n  alertInterval: 15000,\r\n  threshold: 30,\r\n  alertVolume: 0.5,\r\n  textAlertEnabled: true,\r\n  soundAlertEnabled: true,\r\n  isCompact: false,\r\n  lowVolumeDuration: 3000\r\n};\r\n\r\nclass SettingsManager {\r\n  private settings: Settings;\r\n\r\n  constructor() {\r\n    const savedSettings = localStorage.getItem('volumeMonitorSettings');\r\n    this.settings = savedSettings \r\n      ? { ...DEFAULT_SETTINGS, ...JSON.parse(savedSettings) }\r\n      : DEFAULT_SETTINGS;\r\n  }\r\n\r\n  public getSettings(): Settings {\r\n    return { ...this.settings };\r\n  }\r\n\r\n  public updateSettings(newSettings: Partial<Settings>): void {\r\n    this.settings = { ...this.settings, ...newSettings };\r\n    localStorage.setItem('volumeMonitorSettings', JSON.stringify(this.settings));\r\n  }\r\n\r\n  public async calibrate(durationMs: number = 10000): Promise<number> {\r\n    const samples: number[] = [];\r\n    const startTime = Date.now();\r\n\r\n    return new Promise((resolve) => {\r\n      const interval = setInterval(() => {\r\n        const currentVolume = audioContextManager.getVolume();\r\n        samples.push(currentVolume);\r\n\r\n        if (Date.now() - startTime >= durationMs) {\r\n          clearInterval(interval);\r\n          const average = samples.reduce((a, b) => a + b, 0) / samples.length;\r\n          const threshold = Math.round(average * 0.6);\r\n          this.updateSettings({ threshold });\r\n          resolve(threshold);\r\n        }\r\n      }, 100);\r\n    });\r\n  }\r\n\r\n  public resetToDefaults(): void {\r\n    this.settings = { ...DEFAULT_SETTINGS };\r\n    localStorage.removeItem('volumeMonitorSettings');\r\n  }\r\n}\r\n\r\nexport const settingsManager = new SettingsManager(); "],"mappings":"AACA,SAASA,mBAAmB,QAAQ,gBAAgB;AAEpD,MAAMC,gBAA0B,GAAG;EACjCC,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE,IAAI;EACjBC,WAAW,EAAE,KAAK;EAClBC,aAAa,EAAE,KAAK;EACpBC,SAAS,EAAE,EAAE;EACbC,WAAW,EAAE,GAAG;EAChBC,gBAAgB,EAAE,IAAI;EACtBC,iBAAiB,EAAE,IAAI;EACvBC,SAAS,EAAE,KAAK;EAChBC,iBAAiB,EAAE;AACrB,CAAC;AAED,MAAMC,eAAe,CAAC;EAGpBC,WAAWA,CAAA,EAAG;IAAA,KAFNC,QAAQ;IAGd,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,uBAAuB,CAAC;IACnE,IAAI,CAACH,QAAQ,GAAGC,aAAa,GACzB;MAAE,GAAGd,gBAAgB;MAAE,GAAGiB,IAAI,CAACC,KAAK,CAACJ,aAAa;IAAE,CAAC,GACrDd,gBAAgB;EACtB;EAEOmB,WAAWA,CAAA,EAAa;IAC7B,OAAO;MAAE,GAAG,IAAI,CAACN;IAAS,CAAC;EAC7B;EAEOO,cAAcA,CAACC,WAA8B,EAAQ;IAC1D,IAAI,CAACR,QAAQ,GAAG;MAAE,GAAG,IAAI,CAACA,QAAQ;MAAE,GAAGQ;IAAY,CAAC;IACpDN,YAAY,CAACO,OAAO,CAAC,uBAAuB,EAAEL,IAAI,CAACM,SAAS,CAAC,IAAI,CAACV,QAAQ,CAAC,CAAC;EAC9E;EAEA,MAAaW,SAASA,CAACC,UAAkB,GAAG,KAAK,EAAmB;IAClE,MAAMC,OAAiB,GAAG,EAAE;IAC5B,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAE5B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9B,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjC,MAAMC,aAAa,GAAGnC,mBAAmB,CAACoC,SAAS,CAAC,CAAC;QACrDT,OAAO,CAACU,IAAI,CAACF,aAAa,CAAC;QAE3B,IAAIN,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS,IAAIF,UAAU,EAAE;UACxCY,aAAa,CAACL,QAAQ,CAAC;UACvB,MAAMM,OAAO,GAAGZ,OAAO,CAACa,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGf,OAAO,CAACgB,MAAM;UACnE,MAAMrC,SAAS,GAAGsC,IAAI,CAACC,KAAK,CAACN,OAAO,GAAG,GAAG,CAAC;UAC3C,IAAI,CAAClB,cAAc,CAAC;YAAEf;UAAU,CAAC,CAAC;UAClC0B,OAAO,CAAC1B,SAAS,CAAC;QACpB;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;EAEOwC,eAAeA,CAAA,EAAS;IAC7B,IAAI,CAAChC,QAAQ,GAAG;MAAE,GAAGb;IAAiB,CAAC;IACvCe,YAAY,CAAC+B,UAAU,CAAC,uBAAuB,CAAC;EAClD;AACF;AAEA,OAAO,MAAMC,eAAe,GAAG,IAAIpC,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}