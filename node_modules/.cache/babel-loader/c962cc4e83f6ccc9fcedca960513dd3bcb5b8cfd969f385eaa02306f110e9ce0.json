{"ast":null,"code":"class AlertManager {\n  constructor() {\n    this.audioContext = null;\n    this.oscillator = null;\n    this.gainNode = null;\n    this.settings = {\n      soundAlerts: true,\n      alertVolume: 0.5,\n      textAlerts: true,\n      threshold: 30,\n      lowVolumeDuration: 3000\n    };\n  }\n  async initAudio() {\n    if (this.audioContext) return;\n    try {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      this.oscillator = this.audioContext.createOscillator();\n      this.oscillator.type = 'sine';\n      this.oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime);\n      this.gainNode = this.audioContext.createGain();\n      this.gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n      this.oscillator.connect(this.gainNode);\n      this.gainNode.connect(this.audioContext.destination);\n      this.oscillator.start();\n    } catch (error) {\n      console.error('Failed to initialize audio:', error);\n      this.cleanup();\n    }\n  }\n  async playSound() {\n    if (!this.settings.soundAlerts) return;\n    try {\n      await this.initAudio();\n      if (this.gainNode && this.audioContext) {\n        const now = this.audioContext.currentTime;\n        this.gainNode.gain.cancelScheduledValues(now);\n        this.gainNode.gain.setValueAtTime(0, now);\n        this.gainNode.gain.linearRampToValueAtTime(this.settings.alertVolume, now + 0.01);\n        this.gainNode.gain.linearRampToValueAtTime(0, now + 0.5);\n      }\n    } catch (error) {\n      console.error('Failed to play alert sound:', error);\n    }\n  }\n  trigger(type) {\n    switch (type) {\n      case 'sound':\n      case 'low-volume':\n      case 'all':\n        this.playSound();\n        break;\n    }\n  }\n  updateConfig(settings) {\n    this.settings = {\n      ...this.settings,\n      ...settings\n    };\n  }\n  cleanup() {\n    if (this.oscillator) {\n      this.oscillator.stop();\n      this.oscillator.disconnect();\n    }\n    if (this.gainNode) {\n      this.gainNode.disconnect();\n    }\n    if (this.audioContext) {\n      this.audioContext.close();\n    }\n    this.oscillator = null;\n    this.gainNode = null;\n    this.audioContext = null;\n  }\n  dispose() {\n    this.cleanup();\n  }\n}\nexport const alertManager = new AlertManager();","map":{"version":3,"names":["AlertManager","constructor","audioContext","oscillator","gainNode","settings","soundAlerts","alertVolume","textAlerts","threshold","lowVolumeDuration","initAudio","window","AudioContext","webkitAudioContext","createOscillator","type","frequency","setValueAtTime","currentTime","createGain","gain","connect","destination","start","error","console","cleanup","playSound","now","cancelScheduledValues","linearRampToValueAtTime","trigger","updateConfig","stop","disconnect","close","dispose","alertManager"],"sources":["D:/projects/volume-monitor/src/utils/alertManager.ts"],"sourcesContent":["import { Settings } from '../types';\r\n\r\ninterface AlertSettings {\r\n  soundAlerts: boolean;\r\n  alertVolume: number;\r\n  textAlerts?: boolean;\r\n  threshold?: number;\r\n  lowVolumeDuration?: number;\r\n}\r\n\r\nclass AlertManager {\r\n  private audioContext: AudioContext | null = null;\r\n  private oscillator: OscillatorNode | null = null;\r\n  private gainNode: GainNode | null = null;\r\n  private settings: AlertSettings = {\r\n    soundAlerts: true,\r\n    alertVolume: 0.5,\r\n    textAlerts: true,\r\n    threshold: 30,\r\n    lowVolumeDuration: 3000\r\n  };\r\n\r\n  private async initAudio() {\r\n    if (this.audioContext) return;\r\n\r\n    try {\r\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n      \r\n      this.oscillator = this.audioContext.createOscillator();\r\n      this.oscillator.type = 'sine';\r\n      this.oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime);\r\n      \r\n      this.gainNode = this.audioContext.createGain();\r\n      this.gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\r\n      \r\n      this.oscillator.connect(this.gainNode);\r\n      this.gainNode.connect(this.audioContext.destination);\r\n      \r\n      this.oscillator.start();\r\n    } catch (error) {\r\n      console.error('Failed to initialize audio:', error);\r\n      this.cleanup();\r\n    }\r\n  }\r\n\r\n  private async playSound() {\r\n    if (!this.settings.soundAlerts) return;\r\n\r\n    try {\r\n      await this.initAudio();\r\n      if (this.gainNode && this.audioContext) {\r\n        const now = this.audioContext.currentTime;\r\n        \r\n        this.gainNode.gain.cancelScheduledValues(now);\r\n        this.gainNode.gain.setValueAtTime(0, now);\r\n        this.gainNode.gain.linearRampToValueAtTime(this.settings.alertVolume, now + 0.01);\r\n        this.gainNode.gain.linearRampToValueAtTime(0, now + 0.5);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to play alert sound:', error);\r\n    }\r\n  }\r\n\r\n  trigger(type: 'sound' | 'text' | 'visual' | 'all' | 'low-volume') {\r\n    switch (type) {\r\n      case 'sound':\r\n      case 'low-volume':\r\n      case 'all':\r\n        this.playSound();\r\n        break;\r\n    }\r\n  }\r\n\r\n  updateConfig(settings: Partial<AlertSettings>) {\r\n    this.settings = { ...this.settings, ...settings };\r\n  }\r\n\r\n  private cleanup() {\r\n    if (this.oscillator) {\r\n      this.oscillator.stop();\r\n      this.oscillator.disconnect();\r\n    }\r\n    if (this.gainNode) {\r\n      this.gainNode.disconnect();\r\n    }\r\n    if (this.audioContext) {\r\n      this.audioContext.close();\r\n    }\r\n    this.oscillator = null;\r\n    this.gainNode = null;\r\n    this.audioContext = null;\r\n  }\r\n\r\n  dispose() {\r\n    this.cleanup();\r\n  }\r\n}\r\n\r\nexport const alertManager = new AlertManager(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}