{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\volume-monitor\\\\src\\\\components\\\\AudioTest.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { SettingsPanel } from './SettingsPanel';\nimport { VolumeVisualizer } from './VolumeVisualizer';\nimport { VolumeAnalyzer } from './VolumeAnalyzer';\nimport { useAudioMonitor } from '../hooks/useAudioMonitor';\nimport { alertManager } from '../utils/alertManager';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AudioTest = () => {\n  _s();\n  const [settings, setSettings] = useState({\n    textAlertEnabled: true,\n    soundAlertEnabled: true,\n    isCompact: false,\n    alertInterval: 1000,\n    threshold: -30,\n    lowVolumeDuration: 3000,\n    alertVolume: 0.5\n  });\n  const [currentLowVolumeDuration, setCurrentLowVolumeDuration] = useState(0);\n\n  // 使用音频监控 hook\n  const {\n    volume\n  } = useAudioMonitor({\n    threshold: settings.threshold,\n    lowVolumeDuration: settings.lowVolumeDuration,\n    onVolumeLow: () => {\n      if (settings.soundAlertEnabled) {\n        alertManager.trigger('sound');\n      }\n    },\n    onLowVolumeDurationUpdate: setCurrentLowVolumeDuration\n  });\n\n  // 处理设置变更\n  const handleSettingsChange = useCallback(newSettings => {\n    console.log('Settings changing to:', newSettings);\n    setSettings(prevSettings => {\n      const updatedSettings = {\n        ...prevSettings,\n        ...newSettings\n      };\n      alertManager.updateConfig({\n        textAlerts: updatedSettings.textAlertEnabled,\n        soundAlerts: updatedSettings.soundAlertEnabled,\n        threshold: updatedSettings.threshold,\n        alertInterval: updatedSettings.alertInterval,\n        lowVolumeDuration: updatedSettings.lowVolumeDuration,\n        alertVolume: updatedSettings.alertVolume\n      });\n      return updatedSettings;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(VolumeVisualizer, {\n      volume: volume,\n      threshold: settings.threshold,\n      isCompact: settings.isCompact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VolumeAnalyzer, {\n      volume: volume,\n      threshold: settings.threshold,\n      lowVolumeDuration: settings.lowVolumeDuration,\n      currentLowVolumeDuration: currentLowVolumeDuration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SettingsPanel, {\n      settings: {\n        threshold: settings.threshold,\n        lowVolumeDuration: settings.lowVolumeDuration,\n        soundAlertEnabled: settings.soundAlertEnabled,\n        alertVolume: settings.alertVolume\n      },\n      onSettingsChange: handleSettingsChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(AudioTest, \"5VlBy6O3ZybJHydfRRLQbQXg90c=\", false, function () {\n  return [useAudioMonitor];\n});\n_c = AudioTest;\nvar _c;\n$RefreshReg$(_c, \"AudioTest\");","map":{"version":3,"names":["React","useState","useCallback","SettingsPanel","VolumeVisualizer","VolumeAnalyzer","useAudioMonitor","alertManager","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioTest","_s","settings","setSettings","textAlertEnabled","soundAlertEnabled","isCompact","alertInterval","threshold","lowVolumeDuration","alertVolume","currentLowVolumeDuration","setCurrentLowVolumeDuration","volume","onVolumeLow","trigger","onLowVolumeDurationUpdate","handleSettingsChange","newSettings","console","log","prevSettings","updatedSettings","updateConfig","textAlerts","soundAlerts","children","fileName","_jsxFileName","lineNumber","columnNumber","onSettingsChange","_c","$RefreshReg$"],"sources":["D:/projects/volume-monitor/src/components/AudioTest.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { Settings } from '../types';\r\nimport { SettingsPanel } from './SettingsPanel';\r\nimport { VolumeVisualizer } from './VolumeVisualizer';\r\nimport { VolumeAnalyzer } from './VolumeAnalyzer';\r\nimport { useAudioMonitor } from '../hooks/useAudioMonitor';\r\nimport { alertManager } from '../utils/alertManager';\r\n\r\nexport const AudioTest: React.FC = () => {\r\n  const [settings, setSettings] = useState<Settings>({\r\n    textAlertEnabled: true,\r\n    soundAlertEnabled: true,\r\n    isCompact: false,\r\n    alertInterval: 1000,\r\n    threshold: -30,\r\n    lowVolumeDuration: 3000,\r\n    alertVolume: 0.5\r\n  });\r\n\r\n  const [currentLowVolumeDuration, setCurrentLowVolumeDuration] = useState(0);\r\n\r\n  // 使用音频监控 hook\r\n  const { volume } = useAudioMonitor({\r\n    threshold: settings.threshold,\r\n    lowVolumeDuration: settings.lowVolumeDuration,\r\n    onVolumeLow: () => {\r\n      if (settings.soundAlertEnabled) {\r\n        alertManager.trigger('sound');\r\n      }\r\n    },\r\n    onLowVolumeDurationUpdate: setCurrentLowVolumeDuration\r\n  });\r\n\r\n  // 处理设置变更\r\n  const handleSettingsChange = useCallback((newSettings: Partial<Settings>) => {\r\n    console.log('Settings changing to:', newSettings);\r\n    \r\n    setSettings(prevSettings => {\r\n      const updatedSettings = { ...prevSettings, ...newSettings };\r\n      \r\n      alertManager.updateConfig({\r\n        textAlerts: updatedSettings.textAlertEnabled,\r\n        soundAlerts: updatedSettings.soundAlertEnabled,\r\n        threshold: updatedSettings.threshold,\r\n        alertInterval: updatedSettings.alertInterval,\r\n        lowVolumeDuration: updatedSettings.lowVolumeDuration,\r\n        alertVolume: updatedSettings.alertVolume\r\n      });\r\n      \r\n      return updatedSettings;\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <VolumeVisualizer\r\n        volume={volume}\r\n        threshold={settings.threshold}\r\n        isCompact={settings.isCompact}\r\n      />\r\n      \r\n      <VolumeAnalyzer\r\n        volume={volume}\r\n        threshold={settings.threshold}\r\n        lowVolumeDuration={settings.lowVolumeDuration}\r\n        currentLowVolumeDuration={currentLowVolumeDuration}\r\n      />\r\n\r\n      <SettingsPanel\r\n        settings={{\r\n          threshold: settings.threshold,\r\n          lowVolumeDuration: settings.lowVolumeDuration,\r\n          soundAlertEnabled: settings.soundAlertEnabled,\r\n          alertVolume: settings.alertVolume\r\n        }}\r\n        onSettingsChange={handleSettingsChange}\r\n      />\r\n    </>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}