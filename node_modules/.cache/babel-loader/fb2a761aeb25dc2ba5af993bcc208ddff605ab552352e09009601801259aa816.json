{"ast":null,"code":"const DEFAULT_SETTINGS = {\n  threshold: 30,\n  isCompact: false,\n  alertVolume: 0.1,\n  textAlertEnabled: true,\n  soundAlertEnabled: true\n};\nclass SettingsManager {\n  constructor() {\n    this.settings = void 0;\n    this.STORAGE_KEY = 'volume-monitor-settings';\n    this.settings = this.loadSettings();\n  }\n  loadSettings() {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      return stored ? {\n        ...DEFAULT_SETTINGS,\n        ...JSON.parse(stored)\n      } : DEFAULT_SETTINGS;\n    } catch {\n      return DEFAULT_SETTINGS;\n    }\n  }\n  saveSettings() {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.settings));\n  }\n  updateSettings(newSettings) {\n    this.settings = {\n      ...this.settings,\n      ...newSettings\n    };\n    this.saveSettings();\n  }\n  getSettings() {\n    return {\n      ...this.settings\n    };\n  }\n  async calibrate(durationMs = 10000) {\n    return new Promise(resolve => {\n      const samples = [];\n      let startTime = Date.now();\n      const interval = setInterval(() => {\n        var _window$audioContextM, _window$audioContextM2;\n        // 这里会从 audioContextManager 获取当前音量\n        const currentVolume = (_window$audioContextM = (_window$audioContextM2 = window.audioContextManager) === null || _window$audioContextM2 === void 0 ? void 0 : _window$audioContextM2.getVolume()) !== null && _window$audioContextM !== void 0 ? _window$audioContextM : 0;\n        samples.push(currentVolume);\n        if (Date.now() - startTime >= durationMs) {\n          clearInterval(interval);\n          const averageVolume = samples.reduce((a, b) => a + b, 0) / samples.length;\n          this.settings.calibrationData = {\n            timestamp: Date.now(),\n            averageVolume\n          };\n          this.settings.threshold = Math.max(20, averageVolume * 0.6);\n          this.saveSettings();\n          resolve(this.settings.threshold);\n        }\n      }, 100);\n    });\n  }\n  resetSettings() {\n    this.settings = {\n      ...DEFAULT_SETTINGS\n    };\n    this.saveSettings();\n  }\n}\nexport const settingsManager = new SettingsManager();","map":{"version":3,"names":["DEFAULT_SETTINGS","threshold","isCompact","alertVolume","textAlertEnabled","soundAlertEnabled","SettingsManager","constructor","settings","STORAGE_KEY","loadSettings","stored","localStorage","getItem","JSON","parse","saveSettings","setItem","stringify","updateSettings","newSettings","getSettings","calibrate","durationMs","Promise","resolve","samples","startTime","Date","now","interval","setInterval","_window$audioContextM","_window$audioContextM2","currentVolume","window","audioContextManager","getVolume","push","clearInterval","averageVolume","reduce","a","b","length","calibrationData","timestamp","Math","max","resetSettings","settingsManager"],"sources":["D:/projects/volume-monitor/src/utils/settingsManager.ts"],"sourcesContent":["interface Settings {\r\n  threshold: number;\r\n  isCompact: boolean;\r\n  alertVolume: number;\r\n  textAlertEnabled: boolean;\r\n  soundAlertEnabled: boolean;\r\n  calibrationData?: {\r\n    timestamp: number;\r\n    averageVolume: number;\r\n  };\r\n}\r\n\r\nconst DEFAULT_SETTINGS: Settings = {\r\n  threshold: 30,\r\n  isCompact: false,\r\n  alertVolume: 0.1,\r\n  textAlertEnabled: true,\r\n  soundAlertEnabled: true,\r\n};\r\n\r\nclass SettingsManager {\r\n  private settings: Settings;\r\n  private readonly STORAGE_KEY = 'volume-monitor-settings';\r\n\r\n  constructor() {\r\n    this.settings = this.loadSettings();\r\n  }\r\n\r\n  private loadSettings(): Settings {\r\n    try {\r\n      const stored = localStorage.getItem(this.STORAGE_KEY);\r\n      return stored ? { ...DEFAULT_SETTINGS, ...JSON.parse(stored) } : DEFAULT_SETTINGS;\r\n    } catch {\r\n      return DEFAULT_SETTINGS;\r\n    }\r\n  }\r\n\r\n  public saveSettings() {\r\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.settings));\r\n  }\r\n\r\n  public updateSettings(newSettings: Partial<Settings>) {\r\n    this.settings = { ...this.settings, ...newSettings };\r\n    this.saveSettings();\r\n  }\r\n\r\n  public getSettings(): Settings {\r\n    return { ...this.settings };\r\n  }\r\n\r\n  public async calibrate(durationMs: number = 10000): Promise<number> {\r\n    return new Promise((resolve) => {\r\n      const samples: number[] = [];\r\n      let startTime = Date.now();\r\n      \r\n      const interval = setInterval(() => {\r\n        // 这里会从 audioContextManager 获取当前音量\r\n        const currentVolume = window.audioContextManager?.getVolume() ?? 0;\r\n        samples.push(currentVolume);\r\n\r\n        if (Date.now() - startTime >= durationMs) {\r\n          clearInterval(interval);\r\n          const averageVolume = samples.reduce((a, b) => a + b, 0) / samples.length;\r\n          this.settings.calibrationData = {\r\n            timestamp: Date.now(),\r\n            averageVolume,\r\n          };\r\n          this.settings.threshold = Math.max(20, averageVolume * 0.6);\r\n          this.saveSettings();\r\n          resolve(this.settings.threshold);\r\n        }\r\n      }, 100);\r\n    });\r\n  }\r\n\r\n  public resetSettings() {\r\n    this.settings = { ...DEFAULT_SETTINGS };\r\n    this.saveSettings();\r\n  }\r\n}\r\n\r\nexport const settingsManager = new SettingsManager(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}