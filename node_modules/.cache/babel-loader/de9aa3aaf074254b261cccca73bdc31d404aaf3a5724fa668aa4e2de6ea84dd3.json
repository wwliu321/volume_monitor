{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from 'react';\nexport const useAudioMonitor = ({\n  threshold,\n  lowVolumeDuration,\n  onVolumeLow,\n  onLowVolumeDurationUpdate\n}) => {\n  _s();\n  const [volume, setVolume] = useState(0);\n  const [error, setError] = useState(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const sourceRef = useRef(null);\n  const streamRef = useRef(null);\n  const isRunningRef = useRef(false);\n  const lowVolumeStartTimeRef = useRef(null);\n  const configuredDurationRef = useRef(lowVolumeDuration);\n  const analyzeTimeoutRef = useRef(null);\n\n  // 配置更新时的处理\n  useEffect(() => {\n    console.log('配置更新 - 新的持续时间:', lowVolumeDuration, '旧的持续时间:', configuredDurationRef.current);\n    configuredDurationRef.current = lowVolumeDuration;\n\n    // 重置当前的计时\n    if (lowVolumeStartTimeRef.current !== null) {\n      console.log('重置计时器以使用新配置');\n      lowVolumeStartTimeRef.current = Date.now();\n      onLowVolumeDurationUpdate(0);\n    }\n  }, [lowVolumeDuration, onLowVolumeDurationUpdate]);\n  const analyze = useCallback(() => {\n    if (!analyserRef.current || !isRunningRef.current) return;\n    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n    analyserRef.current.getByteFrequencyData(dataArray);\n    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n    const normalizedVolume = Math.round(average / 255 * 100);\n    setVolume(normalizedVolume);\n    const now = Date.now();\n    if (normalizedVolume < threshold) {\n      if (lowVolumeStartTimeRef.current === null) {\n        console.log('开始新的低音量计时，目标持续时间:', configuredDurationRef.current);\n        lowVolumeStartTimeRef.current = now;\n      }\n      const duration = now - lowVolumeStartTimeRef.current;\n      onLowVolumeDurationUpdate(duration);\n\n      // 详细的调试信息\n      console.log('当前状态:', {\n        当前持续时间: duration,\n        目标持续时间: configuredDurationRef.current,\n        是否应该触发: duration >= configuredDurationRef.current\n      });\n      if (duration >= configuredDurationRef.current) {\n        console.log('触发提醒 - 持续时间:', duration, '目标时间:', configuredDurationRef.current);\n        onVolumeLow();\n        lowVolumeStartTimeRef.current = now;\n        onLowVolumeDurationUpdate(0);\n      }\n    } else {\n      if (lowVolumeStartTimeRef.current !== null) {\n        console.log('音量恢复正常，重置计时器');\n        lowVolumeStartTimeRef.current = null;\n        onLowVolumeDurationUpdate(0);\n      }\n    }\n\n    // 使用 ref 来存储 timeout ID\n    if (analyzeTimeoutRef.current) {\n      clearTimeout(analyzeTimeoutRef.current);\n    }\n    analyzeTimeoutRef.current = setTimeout(analyze, 100);\n  }, [threshold, onVolumeLow, onLowVolumeDurationUpdate]);\n  const stopMonitoring = useCallback(() => {\n    console.log('停止监控');\n    isRunningRef.current = false;\n    if (analyzeTimeoutRef.current) {\n      clearTimeout(analyzeTimeoutRef.current);\n    }\n    if (sourceRef.current) {\n      sourceRef.current.disconnect();\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n    lowVolumeStartTimeRef.current = null;\n    onLowVolumeDurationUpdate(0);\n  }, [onLowVolumeDurationUpdate]);\n  const startMonitoring = useCallback(async () => {\n    try {\n      if (!navigator.mediaDevices) {\n        throw new Error('浏览器不支持音频输入');\n      }\n      console.log('开始监控 - 当前配置的持续时间:', configuredDurationRef.current);\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      streamRef.current = stream;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      audioContextRef.current = audioContext;\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      analyserRef.current = analyser;\n      const source = audioContext.createMediaStreamSource(stream);\n      source.connect(analyser);\n      sourceRef.current = source;\n      lowVolumeStartTimeRef.current = null;\n      isRunningRef.current = true;\n      analyze();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : '未知错误');\n    }\n  }, [analyze]);\n\n  // 清理函数\n  useEffect(() => {\n    return () => {\n      if (analyzeTimeoutRef.current) {\n        clearTimeout(analyzeTimeoutRef.current);\n      }\n      stopMonitoring();\n    };\n  }, [stopMonitoring]);\n  const getVolumeStatus = volume => {\n    if (volume < threshold) {\n      return '让我们一起练习提高音量,相信自己可以做到!';\n    } else if (volume < 50) {\n      return '不错,声音清晰可闻,继续保持!';\n    } else if (volume < 80) {\n      return '太棒了,这个音量非常适合表达!';\n    } else {\n      return '充满自信的声音,保持这种状态!';\n    }\n  };\n  return {\n    volume,\n    error,\n    startMonitoring,\n    stopMonitoring\n  };\n};\n_s(useAudioMonitor, \"yQ7U9VGqd90kAw5G62NGn3hsGho=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","useAudioMonitor","threshold","lowVolumeDuration","onVolumeLow","onLowVolumeDurationUpdate","_s","volume","setVolume","error","setError","audioContextRef","analyserRef","sourceRef","streamRef","isRunningRef","lowVolumeStartTimeRef","configuredDurationRef","analyzeTimeoutRef","console","log","current","Date","now","analyze","dataArray","Uint8Array","frequencyBinCount","getByteFrequencyData","average","reduce","a","b","length","normalizedVolume","Math","round","duration","当前持续时间","目标持续时间","是否应该触发","clearTimeout","setTimeout","stopMonitoring","disconnect","close","getTracks","forEach","track","stop","startMonitoring","navigator","mediaDevices","Error","stream","getUserMedia","audio","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","source","createMediaStreamSource","connect","err","message","getVolumeStatus"],"sources":["D:/projects/volume-monitor/src/hooks/useAudioMonitor.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\r\n\r\ninterface AudioMonitorProps {\r\n  threshold: number;\r\n  lowVolumeDuration: number;\r\n  onVolumeLow: () => void;\r\n  onLowVolumeDurationUpdate: (duration: number) => void;\r\n}\r\n\r\nexport const useAudioMonitor = ({\r\n  threshold,\r\n  lowVolumeDuration,\r\n  onVolumeLow,\r\n  onLowVolumeDurationUpdate,\r\n}: AudioMonitorProps) => {\r\n  const [volume, setVolume] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n  const analyserRef = useRef<AnalyserNode | null>(null);\r\n  const sourceRef = useRef<MediaStreamAudioSourceNode | null>(null);\r\n  const streamRef = useRef<MediaStream | null>(null);\r\n  const isRunningRef = useRef(false);\r\n  const lowVolumeStartTimeRef = useRef<number | null>(null);\r\n  const configuredDurationRef = useRef(lowVolumeDuration);\r\n  const analyzeTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // 配置更新时的处理\r\n  useEffect(() => {\r\n    console.log('配置更新 - 新的持续时间:', lowVolumeDuration, '旧的持续时间:', configuredDurationRef.current);\r\n    configuredDurationRef.current = lowVolumeDuration;\r\n    \r\n    // 重置当前的计时\r\n    if (lowVolumeStartTimeRef.current !== null) {\r\n      console.log('重置计时器以使用新配置');\r\n      lowVolumeStartTimeRef.current = Date.now();\r\n      onLowVolumeDurationUpdate(0);\r\n    }\r\n  }, [lowVolumeDuration, onLowVolumeDurationUpdate]);\r\n\r\n  const analyze = useCallback(() => {\r\n    if (!analyserRef.current || !isRunningRef.current) return;\r\n\r\n    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\r\n    analyserRef.current.getByteFrequencyData(dataArray);\r\n\r\n    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\r\n    const normalizedVolume = Math.round((average / 255) * 100);\r\n    setVolume(normalizedVolume);\r\n\r\n    const now = Date.now();\r\n    if (normalizedVolume < threshold) {\r\n      if (lowVolumeStartTimeRef.current === null) {\r\n        console.log('开始新的低音量计时，目标持续时间:', configuredDurationRef.current);\r\n        lowVolumeStartTimeRef.current = now;\r\n      }\r\n\r\n      const duration = now - lowVolumeStartTimeRef.current;\r\n      onLowVolumeDurationUpdate(duration);\r\n\r\n      // 详细的调试信息\r\n      console.log('当前状态:', {\r\n        当前持续时间: duration,\r\n        目标持续时间: configuredDurationRef.current,\r\n        是否应该触发: duration >= configuredDurationRef.current\r\n      });\r\n\r\n      if (duration >= configuredDurationRef.current) {\r\n        console.log('触发提醒 - 持续时间:', duration, '目标时间:', configuredDurationRef.current);\r\n        onVolumeLow();\r\n        lowVolumeStartTimeRef.current = now;\r\n        onLowVolumeDurationUpdate(0);\r\n      }\r\n    } else {\r\n      if (lowVolumeStartTimeRef.current !== null) {\r\n        console.log('音量恢复正常，重置计时器');\r\n        lowVolumeStartTimeRef.current = null;\r\n        onLowVolumeDurationUpdate(0);\r\n      }\r\n    }\r\n\r\n    // 使用 ref 来存储 timeout ID\r\n    if (analyzeTimeoutRef.current) {\r\n      clearTimeout(analyzeTimeoutRef.current);\r\n    }\r\n    analyzeTimeoutRef.current = setTimeout(analyze, 100);\r\n  }, [threshold, onVolumeLow, onLowVolumeDurationUpdate]);\r\n\r\n  const stopMonitoring = useCallback(() => {\r\n    console.log('停止监控');\r\n    isRunningRef.current = false;\r\n    \r\n    if (analyzeTimeoutRef.current) {\r\n      clearTimeout(analyzeTimeoutRef.current);\r\n    }\r\n    \r\n    if (sourceRef.current) {\r\n      sourceRef.current.disconnect();\r\n    }\r\n    if (audioContextRef.current) {\r\n      audioContextRef.current.close();\r\n    }\r\n    if (streamRef.current) {\r\n      streamRef.current.getTracks().forEach(track => track.stop());\r\n    }\r\n    \r\n    lowVolumeStartTimeRef.current = null;\r\n    onLowVolumeDurationUpdate(0);\r\n  }, [onLowVolumeDurationUpdate]);\r\n\r\n  const startMonitoring = useCallback(async () => {\r\n    try {\r\n      if (!navigator.mediaDevices) {\r\n        throw new Error('浏览器不支持音频输入');\r\n      }\r\n\r\n      console.log('开始监控 - 当前配置的持续时间:', configuredDurationRef.current);\r\n      \r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      streamRef.current = stream;\r\n\r\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n      audioContextRef.current = audioContext;\r\n\r\n      const analyser = audioContext.createAnalyser();\r\n      analyser.fftSize = 256;\r\n      analyserRef.current = analyser;\r\n\r\n      const source = audioContext.createMediaStreamSource(stream);\r\n      source.connect(analyser);\r\n      sourceRef.current = source;\r\n\r\n      lowVolumeStartTimeRef.current = null;\r\n      isRunningRef.current = true;\r\n      analyze();\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : '未知错误');\r\n    }\r\n  }, [analyze]);\r\n\r\n  // 清理函数\r\n  useEffect(() => {\r\n    return () => {\r\n      if (analyzeTimeoutRef.current) {\r\n        clearTimeout(analyzeTimeoutRef.current);\r\n      }\r\n      stopMonitoring();\r\n    };\r\n  }, [stopMonitoring]);\r\n\r\n  const getVolumeStatus = (volume: number) => {\r\n    if (volume < threshold) {\r\n      return '让我们一起练习提高音量,相信自己可以做到!';\r\n    } else if (volume < 50) {\r\n      return '不错,声音清晰可闻,继续保持!';\r\n    } else if (volume < 80) {\r\n      return '太棒了,这个音量非常适合表达!';\r\n    } else {\r\n      return '充满自信的声音,保持这种状态!';\r\n    }\r\n  };\r\n\r\n  return {\r\n    volume,\r\n    error,\r\n    startMonitoring,\r\n    stopMonitoring,\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAShE,OAAO,MAAMC,eAAe,GAAGA,CAAC;EAC9BC,SAAS;EACTC,iBAAiB;EACjBC,WAAW;EACXC;AACiB,CAAC,KAAK;EAAAC,EAAA;EACvB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAMc,eAAe,GAAGX,MAAM,CAAsB,IAAI,CAAC;EACzD,MAAMY,WAAW,GAAGZ,MAAM,CAAsB,IAAI,CAAC;EACrD,MAAMa,SAAS,GAAGb,MAAM,CAAoC,IAAI,CAAC;EACjE,MAAMc,SAAS,GAAGd,MAAM,CAAqB,IAAI,CAAC;EAClD,MAAMe,YAAY,GAAGf,MAAM,CAAC,KAAK,CAAC;EAClC,MAAMgB,qBAAqB,GAAGhB,MAAM,CAAgB,IAAI,CAAC;EACzD,MAAMiB,qBAAqB,GAAGjB,MAAM,CAACG,iBAAiB,CAAC;EACvD,MAAMe,iBAAiB,GAAGlB,MAAM,CAAwB,IAAI,CAAC;;EAE7D;EACAF,SAAS,CAAC,MAAM;IACdqB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEjB,iBAAiB,EAAE,SAAS,EAAEc,qBAAqB,CAACI,OAAO,CAAC;IAC1FJ,qBAAqB,CAACI,OAAO,GAAGlB,iBAAiB;;IAEjD;IACA,IAAIa,qBAAqB,CAACK,OAAO,KAAK,IAAI,EAAE;MAC1CF,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BJ,qBAAqB,CAACK,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAC1ClB,yBAAyB,CAAC,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,CAACF,iBAAiB,EAAEE,yBAAyB,CAAC,CAAC;EAElD,MAAMmB,OAAO,GAAGzB,WAAW,CAAC,MAAM;IAChC,IAAI,CAACa,WAAW,CAACS,OAAO,IAAI,CAACN,YAAY,CAACM,OAAO,EAAE;IAEnD,MAAMI,SAAS,GAAG,IAAIC,UAAU,CAACd,WAAW,CAACS,OAAO,CAACM,iBAAiB,CAAC;IACvEf,WAAW,CAACS,OAAO,CAACO,oBAAoB,CAACH,SAAS,CAAC;IAEnD,MAAMI,OAAO,GAAGJ,SAAS,CAACK,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,GAAGP,SAAS,CAACQ,MAAM;IACpE,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAEP,OAAO,GAAG,GAAG,GAAI,GAAG,CAAC;IAC1DrB,SAAS,CAAC0B,gBAAgB,CAAC;IAE3B,MAAMX,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;IACtB,IAAIW,gBAAgB,GAAGhC,SAAS,EAAE;MAChC,IAAIc,qBAAqB,CAACK,OAAO,KAAK,IAAI,EAAE;QAC1CF,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,qBAAqB,CAACI,OAAO,CAAC;QAC/DL,qBAAqB,CAACK,OAAO,GAAGE,GAAG;MACrC;MAEA,MAAMc,QAAQ,GAAGd,GAAG,GAAGP,qBAAqB,CAACK,OAAO;MACpDhB,yBAAyB,CAACgC,QAAQ,CAAC;;MAEnC;MACAlB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE;QACnBkB,MAAM,EAAED,QAAQ;QAChBE,MAAM,EAAEtB,qBAAqB,CAACI,OAAO;QACrCmB,MAAM,EAAEH,QAAQ,IAAIpB,qBAAqB,CAACI;MAC5C,CAAC,CAAC;MAEF,IAAIgB,QAAQ,IAAIpB,qBAAqB,CAACI,OAAO,EAAE;QAC7CF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEiB,QAAQ,EAAE,OAAO,EAAEpB,qBAAqB,CAACI,OAAO,CAAC;QAC7EjB,WAAW,CAAC,CAAC;QACbY,qBAAqB,CAACK,OAAO,GAAGE,GAAG;QACnClB,yBAAyB,CAAC,CAAC,CAAC;MAC9B;IACF,CAAC,MAAM;MACL,IAAIW,qBAAqB,CAACK,OAAO,KAAK,IAAI,EAAE;QAC1CF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3BJ,qBAAqB,CAACK,OAAO,GAAG,IAAI;QACpChB,yBAAyB,CAAC,CAAC,CAAC;MAC9B;IACF;;IAEA;IACA,IAAIa,iBAAiB,CAACG,OAAO,EAAE;MAC7BoB,YAAY,CAACvB,iBAAiB,CAACG,OAAO,CAAC;IACzC;IACAH,iBAAiB,CAACG,OAAO,GAAGqB,UAAU,CAAClB,OAAO,EAAE,GAAG,CAAC;EACtD,CAAC,EAAE,CAACtB,SAAS,EAAEE,WAAW,EAAEC,yBAAyB,CAAC,CAAC;EAEvD,MAAMsC,cAAc,GAAG5C,WAAW,CAAC,MAAM;IACvCoB,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnBL,YAAY,CAACM,OAAO,GAAG,KAAK;IAE5B,IAAIH,iBAAiB,CAACG,OAAO,EAAE;MAC7BoB,YAAY,CAACvB,iBAAiB,CAACG,OAAO,CAAC;IACzC;IAEA,IAAIR,SAAS,CAACQ,OAAO,EAAE;MACrBR,SAAS,CAACQ,OAAO,CAACuB,UAAU,CAAC,CAAC;IAChC;IACA,IAAIjC,eAAe,CAACU,OAAO,EAAE;MAC3BV,eAAe,CAACU,OAAO,CAACwB,KAAK,CAAC,CAAC;IACjC;IACA,IAAI/B,SAAS,CAACO,OAAO,EAAE;MACrBP,SAAS,CAACO,OAAO,CAACyB,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;IAC9D;IAEAjC,qBAAqB,CAACK,OAAO,GAAG,IAAI;IACpChB,yBAAyB,CAAC,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACA,yBAAyB,CAAC,CAAC;EAE/B,MAAM6C,eAAe,GAAGnD,WAAW,CAAC,YAAY;IAC9C,IAAI;MACF,IAAI,CAACoD,SAAS,CAACC,YAAY,EAAE;QAC3B,MAAM,IAAIC,KAAK,CAAC,YAAY,CAAC;MAC/B;MAEAlC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,qBAAqB,CAACI,OAAO,CAAC;MAE/D,MAAMiC,MAAM,GAAG,MAAMH,SAAS,CAACC,YAAY,CAACG,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzE1C,SAAS,CAACO,OAAO,GAAGiC,MAAM;MAE1B,MAAMG,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAKD,MAAM,CAASE,kBAAkB,EAAE,CAAC;MACtFjD,eAAe,CAACU,OAAO,GAAGoC,YAAY;MAEtC,MAAMI,QAAQ,GAAGJ,YAAY,CAACK,cAAc,CAAC,CAAC;MAC9CD,QAAQ,CAACE,OAAO,GAAG,GAAG;MACtBnD,WAAW,CAACS,OAAO,GAAGwC,QAAQ;MAE9B,MAAMG,MAAM,GAAGP,YAAY,CAACQ,uBAAuB,CAACX,MAAM,CAAC;MAC3DU,MAAM,CAACE,OAAO,CAACL,QAAQ,CAAC;MACxBhD,SAAS,CAACQ,OAAO,GAAG2C,MAAM;MAE1BhD,qBAAqB,CAACK,OAAO,GAAG,IAAI;MACpCN,YAAY,CAACM,OAAO,GAAG,IAAI;MAC3BG,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,OAAO2C,GAAG,EAAE;MACZzD,QAAQ,CAACyD,GAAG,YAAYd,KAAK,GAAGc,GAAG,CAACC,OAAO,GAAG,MAAM,CAAC;IACvD;EACF,CAAC,EAAE,CAAC5C,OAAO,CAAC,CAAC;;EAEb;EACA1B,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIoB,iBAAiB,CAACG,OAAO,EAAE;QAC7BoB,YAAY,CAACvB,iBAAiB,CAACG,OAAO,CAAC;MACzC;MACAsB,cAAc,CAAC,CAAC;IAClB,CAAC;EACH,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB,MAAM0B,eAAe,GAAI9D,MAAc,IAAK;IAC1C,IAAIA,MAAM,GAAGL,SAAS,EAAE;MACtB,OAAO,uBAAuB;IAChC,CAAC,MAAM,IAAIK,MAAM,GAAG,EAAE,EAAE;MACtB,OAAO,iBAAiB;IAC1B,CAAC,MAAM,IAAIA,MAAM,GAAG,EAAE,EAAE;MACtB,OAAO,iBAAiB;IAC1B,CAAC,MAAM;MACL,OAAO,iBAAiB;IAC1B;EACF,CAAC;EAED,OAAO;IACLA,MAAM;IACNE,KAAK;IACLyC,eAAe;IACfP;EACF,CAAC;AACH,CAAC;AAACrC,EAAA,CA9JWL,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}