{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from 'react';\nexport const useAudioMonitor = ({\n  threshold,\n  lowVolumeDuration,\n  onVolumeLow,\n  onLowVolumeDurationUpdate\n}) => {\n  _s();\n  const [volume, setVolume] = useState(0);\n  const [error, setError] = useState(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const sourceRef = useRef(null);\n  const streamRef = useRef(null);\n  const isRunningRef = useRef(false);\n  const lowVolumeStartTimeRef = useRef(null);\n  const lastAlertTimeRef = useRef(0);\n  const currentDurationRef = useRef(lowVolumeDuration);\n  useEffect(() => {\n    currentDurationRef.current = lowVolumeDuration;\n  }, [lowVolumeDuration]);\n  const analyze = useCallback(() => {\n    if (!analyserRef.current || !isRunningRef.current) return;\n    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n    analyserRef.current.getByteFrequencyData(dataArray);\n    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n    const normalizedVolume = Math.round(average / 255 * 100);\n    setVolume(normalizedVolume);\n    const now = Date.now();\n    if (normalizedVolume < threshold) {\n      if (lowVolumeStartTimeRef.current === null) {\n        lowVolumeStartTimeRef.current = now;\n        lastAlertTimeRef.current = 0;\n      }\n      const duration = now - lowVolumeStartTimeRef.current;\n      onLowVolumeDurationUpdate(duration);\n      if (duration >= currentDurationRef.current && lastAlertTimeRef.current === 0) {\n        console.log('Triggering alert at duration:', duration, 'threshold:', currentDurationRef.current);\n        onVolumeLow();\n        lastAlertTimeRef.current = now;\n      }\n    } else {\n      lowVolumeStartTimeRef.current = null;\n      lastAlertTimeRef.current = 0;\n      onLowVolumeDurationUpdate(0);\n    }\n    setTimeout(analyze, 100);\n  }, [threshold, onVolumeLow, onLowVolumeDurationUpdate]);\n  const stopMonitoring = useCallback(() => {\n    isRunningRef.current = false;\n    if (sourceRef.current) {\n      sourceRef.current.disconnect();\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n    lowVolumeStartTimeRef.current = null;\n    onLowVolumeDurationUpdate(0);\n  }, [onLowVolumeDurationUpdate]);\n  const startMonitoring = useCallback(async () => {\n    try {\n      if (!navigator.mediaDevices) {\n        throw new Error('浏览器不支持音频输入');\n      }\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      streamRef.current = stream;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      audioContextRef.current = audioContext;\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      analyserRef.current = analyser;\n      const source = audioContext.createMediaStreamSource(stream);\n      source.connect(analyser);\n      sourceRef.current = source;\n      lowVolumeStartTimeRef.current = null;\n      isRunningRef.current = true;\n      analyze();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : '未知错误');\n    }\n  }, [analyze]);\n  useEffect(() => {\n    return () => {\n      stopMonitoring();\n    };\n  }, [stopMonitoring]);\n  return {\n    volume,\n    error,\n    startMonitoring,\n    stopMonitoring\n  };\n};\n_s(useAudioMonitor, \"TyNfe9FPePoNX+iMPNnKbv1pSEo=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","useAudioMonitor","threshold","lowVolumeDuration","onVolumeLow","onLowVolumeDurationUpdate","_s","volume","setVolume","error","setError","audioContextRef","analyserRef","sourceRef","streamRef","isRunningRef","lowVolumeStartTimeRef","lastAlertTimeRef","currentDurationRef","current","analyze","dataArray","Uint8Array","frequencyBinCount","getByteFrequencyData","average","reduce","a","b","length","normalizedVolume","Math","round","now","Date","duration","console","log","setTimeout","stopMonitoring","disconnect","close","getTracks","forEach","track","stop","startMonitoring","navigator","mediaDevices","Error","stream","getUserMedia","audio","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","source","createMediaStreamSource","connect","err","message"],"sources":["D:/projects/volume-monitor/src/hooks/useAudioMonitor.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\r\n\r\ninterface AudioMonitorProps {\r\n  threshold: number;\r\n  lowVolumeDuration: number;\r\n  onVolumeLow: () => void;\r\n  onLowVolumeDurationUpdate: (duration: number) => void;\r\n}\r\n\r\nexport const useAudioMonitor = ({\r\n  threshold,\r\n  lowVolumeDuration,\r\n  onVolumeLow,\r\n  onLowVolumeDurationUpdate,\r\n}: AudioMonitorProps) => {\r\n  const [volume, setVolume] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n  const analyserRef = useRef<AnalyserNode | null>(null);\r\n  const sourceRef = useRef<MediaStreamAudioSourceNode | null>(null);\r\n  const streamRef = useRef<MediaStream | null>(null);\r\n  const isRunningRef = useRef(false);\r\n  const lowVolumeStartTimeRef = useRef<number | null>(null);\r\n  const lastAlertTimeRef = useRef<number>(0);\r\n  const currentDurationRef = useRef<number>(lowVolumeDuration);\r\n\r\n  useEffect(() => {\r\n    currentDurationRef.current = lowVolumeDuration;\r\n  }, [lowVolumeDuration]);\r\n\r\n  const analyze = useCallback(() => {\r\n    if (!analyserRef.current || !isRunningRef.current) return;\r\n\r\n    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\r\n    analyserRef.current.getByteFrequencyData(dataArray);\r\n\r\n    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\r\n    const normalizedVolume = Math.round((average / 255) * 100);\r\n    setVolume(normalizedVolume);\r\n\r\n    const now = Date.now();\r\n    if (normalizedVolume < threshold) {\r\n      if (lowVolumeStartTimeRef.current === null) {\r\n        lowVolumeStartTimeRef.current = now;\r\n        lastAlertTimeRef.current = 0;\r\n      }\r\n      \r\n      const duration = now - lowVolumeStartTimeRef.current;\r\n      onLowVolumeDurationUpdate(duration);\r\n\r\n      if (duration >= currentDurationRef.current && lastAlertTimeRef.current === 0) {\r\n        console.log('Triggering alert at duration:', duration, 'threshold:', currentDurationRef.current);\r\n        onVolumeLow();\r\n        lastAlertTimeRef.current = now;\r\n      }\r\n    } else {\r\n      lowVolumeStartTimeRef.current = null;\r\n      lastAlertTimeRef.current = 0;\r\n      onLowVolumeDurationUpdate(0);\r\n    }\r\n\r\n    setTimeout(analyze, 100);\r\n  }, [threshold, onVolumeLow, onLowVolumeDurationUpdate]);\r\n\r\n  const stopMonitoring = useCallback(() => {\r\n    isRunningRef.current = false;\r\n    if (sourceRef.current) {\r\n      sourceRef.current.disconnect();\r\n    }\r\n    if (audioContextRef.current) {\r\n      audioContextRef.current.close();\r\n    }\r\n    if (streamRef.current) {\r\n      streamRef.current.getTracks().forEach(track => track.stop());\r\n    }\r\n    lowVolumeStartTimeRef.current = null;\r\n    onLowVolumeDurationUpdate(0);\r\n  }, [onLowVolumeDurationUpdate]);\r\n\r\n  const startMonitoring = useCallback(async () => {\r\n    try {\r\n      if (!navigator.mediaDevices) {\r\n        throw new Error('浏览器不支持音频输入');\r\n      }\r\n\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      streamRef.current = stream;\r\n\r\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n      audioContextRef.current = audioContext;\r\n\r\n      const analyser = audioContext.createAnalyser();\r\n      analyser.fftSize = 256;\r\n      analyserRef.current = analyser;\r\n\r\n      const source = audioContext.createMediaStreamSource(stream);\r\n      source.connect(analyser);\r\n      sourceRef.current = source;\r\n\r\n      lowVolumeStartTimeRef.current = null;\r\n      isRunningRef.current = true;\r\n      analyze();\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : '未知错误');\r\n    }\r\n  }, [analyze]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      stopMonitoring();\r\n    };\r\n  }, [stopMonitoring]);\r\n\r\n  return {\r\n    volume,\r\n    error,\r\n    startMonitoring,\r\n    stopMonitoring,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}