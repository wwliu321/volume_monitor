{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { audioContextManager } from '../utils/audioContext';\nexport function useAudioMonitor({\n  threshold = 30,\n  lowVolumeDuration = 3000,\n  onVolumeLow,\n  sampleInterval = 50\n} = {}) {\n  _s();\n  const [volume, setVolume] = useState(0);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [error, setError] = useState(null);\n  const animationFrameId = useRef(null);\n  const lastUpdateTime = useRef(0);\n  const lowVolumeStartTime = useRef(null);\n  const updateVolume = useCallback(() => {\n    const now = Date.now();\n    if (now - lastUpdateTime.current >= sampleInterval) {\n      const currentVolume = audioContextManager.getVolume();\n      setVolume(currentVolume);\n      lastUpdateTime.current = now;\n\n      // 检查低音量持续时间\n      if (currentVolume < threshold) {\n        if (lowVolumeStartTime.current === null) {\n          // 首次低于阈值，记录开始时间\n          lowVolumeStartTime.current = now;\n        } else if (now - lowVolumeStartTime.current >= lowVolumeDuration) {\n          // 如果持续时间超过设定值，触发回调\n          onVolumeLow === null || onVolumeLow === void 0 ? void 0 : onVolumeLow();\n          // 重置计时器，避免重复触发\n          lowVolumeStartTime.current = now;\n        }\n      } else {\n        // 音量恢复正常，重置计时器\n        lowVolumeStartTime.current = null;\n      }\n    }\n    animationFrameId.current = requestAnimationFrame(updateVolume);\n  }, [threshold, onVolumeLow, sampleInterval, lowVolumeDuration]);\n  const startMonitoring = useCallback(async () => {\n    try {\n      await audioContextManager.startMonitoring();\n      lastUpdateTime.current = Date.now();\n      updateVolume();\n      setIsMonitoring(true);\n      setError(null);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '未知错误';\n      setError(errorMessage);\n      setIsMonitoring(false);\n    }\n  }, [updateVolume]);\n  const stopMonitoring = useCallback(() => {\n    if (animationFrameId.current) {\n      cancelAnimationFrame(animationFrameId.current);\n      animationFrameId.current = null;\n    }\n    audioContextManager.stopMonitoring();\n    setIsMonitoring(false);\n    lowVolumeStartTime.current = null;\n  }, []);\n  useEffect(() => {\n    return () => {\n      stopMonitoring();\n    };\n  }, [stopMonitoring]);\n  return {\n    volume,\n    isMonitoring,\n    error,\n    startMonitoring,\n    stopMonitoring\n  };\n}\n_s(useAudioMonitor, \"uhrBGI5xdMUzJkN3eesmfCRe37c=\");","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","audioContextManager","useAudioMonitor","threshold","lowVolumeDuration","onVolumeLow","sampleInterval","_s","volume","setVolume","isMonitoring","setIsMonitoring","error","setError","animationFrameId","lastUpdateTime","lowVolumeStartTime","updateVolume","now","Date","current","currentVolume","getVolume","requestAnimationFrame","startMonitoring","err","errorMessage","Error","message","stopMonitoring","cancelAnimationFrame"],"sources":["D:/projects/volume-monitor/src/hooks/useAudioMonitor.ts"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\r\nimport { audioContextManager } from '../utils/audioContext';\r\n\r\ninterface UseAudioMonitorOptions {\r\n  threshold?: number;\r\n  lowVolumeDuration?: number;\r\n  onVolumeLow?: () => void;\r\n  sampleInterval?: number;\r\n}\r\n\r\nexport function useAudioMonitor({\r\n  threshold = 30,\r\n  lowVolumeDuration = 3000,\r\n  onVolumeLow,\r\n  sampleInterval = 50\r\n}: UseAudioMonitorOptions = {}) {\r\n  const [volume, setVolume] = useState<number>(0);\r\n  const [isMonitoring, setIsMonitoring] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const animationFrameId = useRef<number | null>(null);\r\n  const lastUpdateTime = useRef<number>(0);\r\n  const lowVolumeStartTime = useRef<number | null>(null);\r\n\r\n  const updateVolume = useCallback(() => {\r\n    const now = Date.now();\r\n    if (now - lastUpdateTime.current >= sampleInterval) {\r\n      const currentVolume = audioContextManager.getVolume();\r\n      setVolume(currentVolume);\r\n      lastUpdateTime.current = now;\r\n\r\n      // 检查低音量持续时间\r\n      if (currentVolume < threshold) {\r\n        if (lowVolumeStartTime.current === null) {\r\n          // 首次低于阈值，记录开始时间\r\n          lowVolumeStartTime.current = now;\r\n        } else if (now - lowVolumeStartTime.current >= lowVolumeDuration) {\r\n          // 如果持续时间超过设定值，触发回调\r\n          onVolumeLow?.();\r\n          // 重置计时器，避免重复触发\r\n          lowVolumeStartTime.current = now;\r\n        }\r\n      } else {\r\n        // 音量恢复正常，重置计时器\r\n        lowVolumeStartTime.current = null;\r\n      }\r\n    }\r\n    \r\n    animationFrameId.current = requestAnimationFrame(updateVolume);\r\n  }, [threshold, onVolumeLow, sampleInterval, lowVolumeDuration]);\r\n\r\n  const startMonitoring = useCallback(async () => {\r\n    try {\r\n      await audioContextManager.startMonitoring();\r\n      lastUpdateTime.current = Date.now();\r\n      updateVolume();\r\n      setIsMonitoring(true);\r\n      setError(null);\r\n    } catch (err: unknown) {\r\n      const errorMessage = err instanceof Error ? err.message : '未知错误';\r\n      setError(errorMessage);\r\n      setIsMonitoring(false);\r\n    }\r\n  }, [updateVolume]);\r\n\r\n  const stopMonitoring = useCallback(() => {\r\n    if (animationFrameId.current) {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n      animationFrameId.current = null;\r\n    }\r\n    audioContextManager.stopMonitoring();\r\n    setIsMonitoring(false);\r\n    lowVolumeStartTime.current = null;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      stopMonitoring();\r\n    };\r\n  }, [stopMonitoring]);\r\n\r\n  return {\r\n    volume,\r\n    isMonitoring,\r\n    error,\r\n    startMonitoring,\r\n    stopMonitoring\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}