{"ast":null,"code":"class AlertSoundManager {\n  constructor() {\n    this.audioContext = null;\n    this.gainNode = null;\n    this.oscillator = null;\n    this.initAudioContext();\n  }\n  initAudioContext() {\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    this.gainNode = this.audioContext.createGain();\n    this.gainNode.connect(this.audioContext.destination);\n    this.gainNode.gain.value = 0.1; // 设置音量为10%\n  }\n  playAlert(frequency = 440, duration = 200) {\n    if (!this.audioContext || !this.gainNode) return;\n\n    // 创建振荡器\n    this.oscillator = this.audioContext.createOscillator();\n    this.oscillator.type = 'sine';\n    this.oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n\n    // 设置音量包络\n    this.gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n    this.gainNode.gain.linearRampToValueAtTime(0.1, this.audioContext.currentTime + 0.01);\n    this.gainNode.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + duration / 1000);\n\n    // 连接并开始播放\n    this.oscillator.connect(this.gainNode);\n    this.oscillator.start();\n    this.oscillator.stop(this.audioContext.currentTime + duration / 1000);\n\n    // 清理\n    setTimeout(() => {\n      var _this$oscillator;\n      (_this$oscillator = this.oscillator) === null || _this$oscillator === void 0 ? void 0 : _this$oscillator.disconnect();\n      this.oscillator = null;\n    }, duration);\n  }\n  setVolume(volume) {\n    if (this.gainNode) {\n      this.gainNode.gain.value = Math.max(0, Math.min(1, volume));\n    }\n  }\n}\nexport const alertSound = new AlertSoundManager();","map":{"version":3,"names":["AlertSoundManager","constructor","audioContext","gainNode","oscillator","initAudioContext","window","AudioContext","webkitAudioContext","createGain","connect","destination","gain","value","playAlert","frequency","duration","createOscillator","type","setValueAtTime","currentTime","linearRampToValueAtTime","start","stop","setTimeout","_this$oscillator","disconnect","setVolume","volume","Math","max","min","alertSound"],"sources":["D:/projects/volume-monitor/src/utils/alertSound.ts"],"sourcesContent":["class AlertSoundManager {\r\n  private audioContext: AudioContext | null = null;\r\n  private gainNode: GainNode | null = null;\r\n  private oscillator: OscillatorNode | null = null;\r\n\r\n  constructor() {\r\n    this.initAudioContext();\r\n  }\r\n\r\n  private initAudioContext() {\r\n    this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n    this.gainNode = this.audioContext.createGain();\r\n    this.gainNode.connect(this.audioContext.destination);\r\n    this.gainNode.gain.value = 0.1; // 设置音量为10%\r\n  }\r\n\r\n  public playAlert(frequency: number = 440, duration: number = 200) {\r\n    if (!this.audioContext || !this.gainNode) return;\r\n\r\n    // 创建振荡器\r\n    this.oscillator = this.audioContext.createOscillator();\r\n    this.oscillator.type = 'sine';\r\n    this.oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\r\n\r\n    // 设置音量包络\r\n    this.gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\r\n    this.gainNode.gain.linearRampToValueAtTime(0.1, this.audioContext.currentTime + 0.01);\r\n    this.gainNode.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + duration / 1000);\r\n\r\n    // 连接并开始播放\r\n    this.oscillator.connect(this.gainNode);\r\n    this.oscillator.start();\r\n    this.oscillator.stop(this.audioContext.currentTime + duration / 1000);\r\n\r\n    // 清理\r\n    setTimeout(() => {\r\n      this.oscillator?.disconnect();\r\n      this.oscillator = null;\r\n    }, duration);\r\n  }\r\n\r\n  public setVolume(volume: number) {\r\n    if (this.gainNode) {\r\n      this.gainNode.gain.value = Math.max(0, Math.min(1, volume));\r\n    }\r\n  }\r\n}\r\n\r\nexport const alertSound = new AlertSoundManager(); "],"mappings":"AAAA,MAAMA,iBAAiB,CAAC;EAKtBC,WAAWA,CAAA,EAAG;IAAA,KAJNC,YAAY,GAAwB,IAAI;IAAA,KACxCC,QAAQ,GAAoB,IAAI;IAAA,KAChCC,UAAU,GAA0B,IAAI;IAG9C,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB;EAEQA,gBAAgBA,CAAA,EAAG;IACzB,IAAI,CAACH,YAAY,GAAG,KAAKI,MAAM,CAACC,YAAY,IAAKD,MAAM,CAASE,kBAAkB,EAAE,CAAC;IACrF,IAAI,CAACL,QAAQ,GAAG,IAAI,CAACD,YAAY,CAACO,UAAU,CAAC,CAAC;IAC9C,IAAI,CAACN,QAAQ,CAACO,OAAO,CAAC,IAAI,CAACR,YAAY,CAACS,WAAW,CAAC;IACpD,IAAI,CAACR,QAAQ,CAACS,IAAI,CAACC,KAAK,GAAG,GAAG,CAAC,CAAC;EAClC;EAEOC,SAASA,CAACC,SAAiB,GAAG,GAAG,EAAEC,QAAgB,GAAG,GAAG,EAAE;IAChE,IAAI,CAAC,IAAI,CAACd,YAAY,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;;IAE1C;IACA,IAAI,CAACC,UAAU,GAAG,IAAI,CAACF,YAAY,CAACe,gBAAgB,CAAC,CAAC;IACtD,IAAI,CAACb,UAAU,CAACc,IAAI,GAAG,MAAM;IAC7B,IAAI,CAACd,UAAU,CAACW,SAAS,CAACI,cAAc,CAACJ,SAAS,EAAE,IAAI,CAACb,YAAY,CAACkB,WAAW,CAAC;;IAElF;IACA,IAAI,CAACjB,QAAQ,CAACS,IAAI,CAACO,cAAc,CAAC,CAAC,EAAE,IAAI,CAACjB,YAAY,CAACkB,WAAW,CAAC;IACnE,IAAI,CAACjB,QAAQ,CAACS,IAAI,CAACS,uBAAuB,CAAC,GAAG,EAAE,IAAI,CAACnB,YAAY,CAACkB,WAAW,GAAG,IAAI,CAAC;IACrF,IAAI,CAACjB,QAAQ,CAACS,IAAI,CAACS,uBAAuB,CAAC,CAAC,EAAE,IAAI,CAACnB,YAAY,CAACkB,WAAW,GAAGJ,QAAQ,GAAG,IAAI,CAAC;;IAE9F;IACA,IAAI,CAACZ,UAAU,CAACM,OAAO,CAAC,IAAI,CAACP,QAAQ,CAAC;IACtC,IAAI,CAACC,UAAU,CAACkB,KAAK,CAAC,CAAC;IACvB,IAAI,CAAClB,UAAU,CAACmB,IAAI,CAAC,IAAI,CAACrB,YAAY,CAACkB,WAAW,GAAGJ,QAAQ,GAAG,IAAI,CAAC;;IAErE;IACAQ,UAAU,CAAC,MAAM;MAAA,IAAAC,gBAAA;MACf,CAAAA,gBAAA,OAAI,CAACrB,UAAU,cAAAqB,gBAAA,uBAAfA,gBAAA,CAAiBC,UAAU,CAAC,CAAC;MAC7B,IAAI,CAACtB,UAAU,GAAG,IAAI;IACxB,CAAC,EAAEY,QAAQ,CAAC;EACd;EAEOW,SAASA,CAACC,MAAc,EAAE;IAC/B,IAAI,IAAI,CAACzB,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,CAACS,IAAI,CAACC,KAAK,GAAGgB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEH,MAAM,CAAC,CAAC;IAC7D;EACF;AACF;AAEA,OAAO,MAAMI,UAAU,GAAG,IAAIhC,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}